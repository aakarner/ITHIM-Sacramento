#travel.times.err.by.inc <- matrix(nrow = 96, ncol = 4)
# Travel diatane by gender and income
travel.distance.by.inc <- matrix(nrow = 96, ncol = 8)
#travel.distance.err.by.inc <- matrix(nrow = 96, ncol = 4)
for(i in 1:8) { # gender and inc
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.inc == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.times.by.inc[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.inc[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
gender.inc == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.distance.by.inc[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.inc[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
# Create a table of population counts for sac counties
pop.age.gender.income <- svytable(~age8cat + gender.inc, subset(CA.persons.svy, ctfip %in% CountyCode))
pop.age.gender.race <- svytable(~age8cat + gender.race, subset(CA.persons.svy, ctfip %in% CountyCode))
return(list(
travel.distance.by.race = travel.distance.by.race,
travel.distance.by.inc = travel.distance.by.inc,
travel.time.by.race = travel.time.by.race,
travel.time.by.inc = travel.time.by.inc,
pop.age.gender.income = pop.age.gender.income,
pop.age.gender.race = pop.age.gender.race
))
}
travelDataOutput_byArea(SJV.counties)
TravelDataOutput_byArea <- function(CountyCode){
# 2 genders, 12 mode categories, 8 age categories, 2 race categories, 2 income categories
##### by gender and race #####
# Travel time by gender and race
travel.times.by.race <- matrix(nrow = 96, ncol = 8)
# travel.times.err.by.race <- matrix(nrow = 96, ncol = 4)
# Travel diatane by gender and race
travel.distance.by.race <- matrix(nrow = 96, ncol = 8)
# travel.distance.err.by.race <- matrix(nrow = 96, ncol = 4)
for(i in 1:8) { # gender and race
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.times.by.race[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.distance.by.race[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
##### by gender and income #####
# Travel time by gender and income
travel.times.by.inc <- matrix(nrow = 96, ncol = 8)
#travel.times.err.by.inc <- matrix(nrow = 96, ncol = 4)
# Travel diatane by gender and income
travel.distance.by.inc <- matrix(nrow = 96, ncol = 8)
#travel.distance.err.by.inc <- matrix(nrow = 96, ncol = 4)
for(i in 1:8) { # gender and inc
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.inc == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.times.by.inc[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.inc[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
gender.inc == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.distance.by.inc[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.inc[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
# Create a table of population counts for sac counties
pop.age.gender.income <- svytable(~age8cat + gender.inc, subset(CA.persons.svy, ctfip %in% CountyCode))
pop.age.gender.race <- svytable(~age8cat + gender.race, subset(CA.persons.svy, ctfip %in% CountyCode))
return(list(
travel.distance.by.race = travel.distance.by.race,
travel.distance.by.inc = travel.distance.by.inc,
travel.times.by.race = travel.time.by.race,
travel.times.by.inc = travel.time.by.inc,
pop.age.gender.income = pop.age.gender.income,
pop.age.gender.race = pop.age.gender.race
))
}
Travel_Output <- TravelDataOutput_byArea(SJV.counties)
library(survey)
options(scipen = 100)
setwd("~/Documents/02_Work/14_GitHub/00_ITHIM/01_Data")
load("00_CHTS2010-2012/Processed_CHTS_2010-2012.RData")
TravelDataOutput_byArea <- function(CountyCode){
# 2 genders, 12 mode categories, 8 age categories, 2 race categories, 2 income categories
##### by gender and race #####
# Travel time by gender and race
travel.times.by.race <- matrix(nrow = 96, ncol = 8)
# travel.times.err.by.race <- matrix(nrow = 96, ncol = 4)
# Travel diatane by gender and race
travel.distance.by.race <- matrix(nrow = 96, ncol = 8)
# travel.distance.err.by.race <- matrix(nrow = 96, ncol = 4)
for(i in 1:8) { # gender and race
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.times.by.race[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.distance.by.race[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
##### by gender and income #####
# Travel time by gender and income
travel.times.by.inc <- matrix(nrow = 96, ncol = 8)
#travel.times.err.by.inc <- matrix(nrow = 96, ncol = 4)
# Travel diatane by gender and income
travel.distance.by.inc <- matrix(nrow = 96, ncol = 8)
#travel.distance.err.by.inc <- matrix(nrow = 96, ncol = 4)
for(i in 1:8) { # gender and inc
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.inc == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.times.by.inc[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.inc[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
gender.inc == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.distance.by.inc[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.inc[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
# Create a table of population counts for sac counties
pop.age.gender.income <- svytable(~age8cat + gender.inc, subset(CA.persons.svy, ctfip %in% CountyCode))
pop.age.gender.race <- svytable(~age8cat + gender.race, subset(CA.persons.svy, ctfip %in% CountyCode))
return(list(
travel.distance.by.race = travel.distance.by.race,
travel.distance.by.inc = travel.distance.by.inc,
travel.times.by.race = travel.times.by.race,
travel.times.by.inc = travel.times.by.inc,
pop.age.gender.income = pop.age.gender.income,
pop.age.gender.race = pop.age.gender.race
))
}
SJV.counties <- c(6107, 6047, 6039, 6019, 6077, 6031, 6029, 6099)
SAC.counties <- c(6017,6061,6067,6101,6113,6115)
Travel_Output <- TravelDataOutput_byArea(SJV.counties)
Travel_Output$pop.age.gender.income
Travel_Output$pop.age.gender.race
Travel_Output$travel.distance.by.race
Travel_Output$travel.times.by.race
table(CA.trips.svy$variables$incom)
hist(table(CA.trips.svy$variables$incom))
plot(table(CA.trips.svy$variables$incom))
plot(table(CA.trips.svy$variables$incom)[1:10])
table(CA.trips.svy$variables$race)
travel.speed.by.inc <- travel.distance.by.inc/travel.times.by.inc
travel.speed.by.inc <- Travel_Output$travel.distance.by.race/Travel_Output$travel.times.by.race
travel.speed.by.inc
travel.speed.by.inc <- Travel_Output$travel.distance.by.race/(Travel_Output$travel.times.by.race/60)
travel.speed.by.inc
travel.times.by.race <- matrix(nrow = 96, ncol = 8)
travel.distance.by.race <- matrix(nrow = 96, ncol = 8)
for(i in 1:8) { # gender and race
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.times.by.race[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.distance.by.race[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
library(survey)
options(scipen = 100)
setwd("~/Documents/02_Work/14_GitHub/00_ITHIM/01_Data")
load("00_CHTS2010-2012/Processed_CHTS_2010-2012.RData")
travel.times.by.race <- matrix(nrow = 96, ncol = 8)
travel.distance.by.race <- matrix(nrow = 96, ncol = 8)
for(i in 1:8) { # gender and race
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.times.by.race[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.distance.by.race[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
SJV.counties <- c(6107, 6047, 6039, 6019, 6077, 6031, 6029, 6099)
for(i in 1:8) { # gender and inc
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.inc == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.times.by.inc[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.inc[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
gender.inc == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.distance.by.inc[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.inc[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
for(i in 1:8) { # gender and race
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.times.by.race[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.distance.by.race[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
time
CountyCode <- c(6107, 6047, 6039, 6019, 6077, 6031, 6029, 6099)
travel.times.by.race <- matrix(nrow = 96, ncol = 8)
travel.distance.by.race <- matrix(nrow = 96, ncol = 8)
for(i in 1:8) { # gender and race
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.times.by.race[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
gender.race == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.distance.by.race[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
travel.times.by.inc <- matrix(nrow = 96, ncol = 8)
travel.distance.by.inc <- matrix(nrow = 96, ncol = 8)
for(i in 1:8) { # gender and inc
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
gender.inc == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.times.by.inc[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.inc[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
gender.inc == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex category
travel.distance.by.inc[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.inc[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
pop.age.gender.income <- svytable(~age8cat + gender.inc, subset(CA.persons.svy, ctfip %in% CountyCode))
pop.age.gender.race <- svytable(~age8cat + gender.race, subset(CA.persons.svy, ctfip %in% CountyCode))
pop.age.gender.race
travel.times.by.race[c(89:96),]
re.walk.time.byRace <- travel.times.by.race[c(89:96),]/pop.age.gender.race[,c(1:8)]
walk.time.byRace <- travel.times.by.race[c(89:96),]/pop.age.gender.race[,c(1:8)]
walk.time.byRace
walk.distance.byRace <- travel.distance.by.race[c(89:96),]/pop.age.gender.race[,c(1:8)]
walk.distance.byRace
cycle.time.byRace <- travel.times.by.race[c(25:32),]/pop.age.gender.race[,c(1:8)]
cycle.distance.byRace <- travel.distance.by.race[c(25:32),]/pop.age.gender.race[,c(1:8)]
cycle.time.byRace
a <- walk.time.byRace
ref <- a[3,2]
ref
a
for (i in 1:4){
ref <- a[3,2*i]
}
ref
a <- b <- walk.time.byRace
for (i in 1:4){
ref <- a[3,2*i]
b[,c(2*i-1:2*i)] <- a[,c(2*i-1:2*i)]/ref
}
b
for (i in 1:4){
ref <- a[3,2*i]
b[,c((2*i-1):(2*i))] <- a[,c(2*i-1:2*i)]/ref
}
b
for (i in 1:4){
ref <- a[3,2*i]
b[,c((2*i-1):(2*i))] <- a[,c((2*i-1):(2*i))]/ref
}
b
CalRelativeMatrix <- function(x){
for (i in 1:4){
ref <- x[3,2*i] #female in the category of 15~29 years old
y[,c((2*i-1):(2*i))] <- x[,c((2*i-1):(2*i))]/ref
}
return(x)
}
CalRelativeMatrix(walk.distance.byRace)
CalRelativeMatrix <- function(x){
for (i in 1:4){
ref <- x[3,2*i] #female in the category of 15~29 years old
x[,c((2*i-1):(2*i))] <- x[,c((2*i-1):(2*i))]/ref
}
return(x)
}
CalRelativeMatrix(walk.distance.byRace)
walk.distance.byRace
re.walk.time.byRace <- CalRelativeMatrix(walk.time.byRace)
re.walk.time.byRace
re.walk.distance.byRace <- CalRelativeMatrix(walk.distance.byRace)
re.walk.distance.byRace
re.walk.time.byRace <- CalRelativeMatrix(walk.time.byRace)
re.walk.distance.byRace <- CalRelativeMatrix(walk.distance.byRace)
re.cycle.time.byRace <- CalRelativeMatrix(cycle.time.byRace)
re.cycle.distance.byRace <- CalRelativeMatrix(cycle.distance.byRace)
walk.speed.byRace <- walk.distance.byRace/walk.time.byRace
walk.speed.byRace
walk.distance.byRace
walk.time.byRace
walk.speed.byRace <- walk.distance.byRace/walk.time.byRace
is.na(walk.speed.byRace)
walk.speed.byRace <- walk.distance.byRace/walk.time.byRace
walk.speed.byRace <- lapply(walk.speed.byRace,function(x) replace(x,is.na(x),0.0))
walk.speed.byRace
walk.speed.byRace <- sapply(walk.speed.byRace,function(x) replace(x,is.na(x),0.0))
walk.speed.byRace <- walk.distance.byRace/walk.time.byRace
walk.speed.byRace <- sapply(walk.speed.byRace,function(x) replace(x,is.na(x),0.0))
walk.speed.byRace
replace(walk.speed.byRace,is.na(walk.speed.byRace),0)
walk.speed.byRace <- walk.distance.byRace/walk.time.byRace
walk.speed.byRace
walk.speed.byRace[is.na(walk.speed.byRace)] <- 0
walk.speed.byRace
cycle.speed.byRace <- cycle.distance.byRace/cycle.time.byRace
cycle.speed.byRace[is.na(cycle.speed.byRace)] <- 0
cycle.speed.byRace
xbar <- matrix(c(0.6,-8.4,-0.1,-10.7),4,1)
xbar
S <- matrix(c(5,0,1,0,0,2,-1,1,1,-1,4,1,0,1,1,4),4,4)
S
T_2 <- 61*t(xbar)%*%solve(S)%*%xbar
T_2
CriticalValue <- ((61-1)*4 / (61-4)) * qf(p = 1 - 0.05, df1 = 4, df2 = 61 - 4)
CriticalValue

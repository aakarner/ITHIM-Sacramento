injury.RR.2036[[i]][,3] <- injury.RR.2036[[i]][,2]/injury.RR.2036[[i]][,1]
injury.RR.2036[[i]][,3] <- replace(injury.RR.2036[[i]][,3],is.na(injury.RR.2036[[i]][,3]),0)
}
return(list(
injury.number.2020=injury.number.2020,
injury.number.2036=injury.number.2036,
injury.RR.2020=injury.RR.2020,
injury.RR.2036=injury.RR.2036
))
}
createInjuryResults <- function(injury.baseline,injury.scenario){
injury.number.2020 <- injury.number.2036 <- rep(list((matrix(NA,nrow=nTrafficModeV,ncol=nTrafficModeS,dimnames=list(ModeNames,c(ModeNames,'one.party'))))), 4)
names(injury.number.2020) <- names(injury.number.2036) <- c("baseline fatalities","baseline injuries","scenario fatalities","scenario injuries")
$injury.scenario.2020
#computing the total injury number
injury.number.2020[[1]] <- injury.baseline[[1]]+injury.baseline[[2]]+injury.baseline[[3]]#baseline fatalities
injury.number.2020[[2]] <- injury.baseline[[4]]+injury.baseline[[5]]+injury.baseline[[6]]#baseline serious injuries
injury.number.2020[[3]] <- injury.scenario$injury.scenario.2020[[1]]+injury.scenario$injury.scenario.2020[[2]]+injury.scenario$injury.scenario.2020[[3]]#scenario fatalities
injury.number.2020[[4]] <- injury.scenario$injury.scenario.2020[[4]]+injury.scenario$injury.scenario.2020[[5]]+injury.scenario$injury.scenario.2020[[6]]#scenario serious injuries
injury.number.2036[[1]] <- injury.baseline[[1]]+injury.baseline[[2]]+injury.baseline[[3]]#baseline fatalities
injury.number.2036[[2]] <- injury.baseline[[4]]+injury.baseline[[5]]+injury.baseline[[6]]#baseline serious injuries
injury.number.2036[[3]] <- injury.scenario$injury.scenario.2036[[1]]+injury.scenario$injury.scenario.2036[[2]]+injury.scenario$injury.scenario.2036[[3]]#scenario fatalities
injury.number.2036[[4]] <- injury.scenario$injury.scenario.2036[[4]]+injury.scenario$injury.scenario.2036[[5]]+injury.scenario$injury.scenario.2036[[6]]#scenario serious injuries
# replace the NA with 0
injury.number.2020 <- lapply(injury.number.2020,function(x) {
x[is.na(x)]=0
return(x)})
injury.number.2036 <- lapply(injury.number.2036,function(x) {
x[is.na(x)]=0
return(x)})
# compute the RR
injury.RR.2020 <- injury.RR.2036 <- rep(list((matrix(NA,nrow=nTrafficModeV+1,ncol=3,dimnames=list(c(ModeNames[1:6],"total"),c("baseline","scenario","RR"))))), 2)
names(injury.RR.2020) <- names(injury.RR.2036) <- c("fatalities","serious injuries")
for (i in 1:2) {
injury.RR.2020[[i]][1:6,1] <- rowSums(injury.number.2020[[i]])
injury.RR.2020[[i]][1:6,2] <- rowSums(injury.number.2020[[i+2]])
injury.RR.2020[[i]][7,1:2] <- colSums(injury.RR.2020[[i]][1:6,1:2])
injury.RR.2020[[i]][,3] <- injury.RR.2020[[i]][,2]/injury.RR.2020[[i]][,1]
injury.RR.2020[[i]][,3] <- replace(injury.RR.2020[[i]][,3],is.na(injury.RR.2020[[i]][,3]),0)
injury.RR.2036[[i]][1:6,1] <- rowSums(injury.number.2036[[i]])
injury.RR.2036[[i]][1:6,2] <- rowSums(injury.number.2036[[i+2]])
injury.RR.2036[[i]][7,1:2] <- colSums(injury.RR.2036[[i]][1:6,1:2])
injury.RR.2036[[i]][,3] <- injury.RR.2036[[i]][,2]/injury.RR.2036[[i]][,1]
injury.RR.2036[[i]][,3] <- replace(injury.RR.2036[[i]][,3],is.na(injury.RR.2036[[i]][,3]),0)
}
return(list(
injury.number.2020=injury.number.2020,
injury.number.2036=injury.number.2036,
injury.RR.2020=injury.RR.2020,
injury.RR.2036=injury.RR.2036
))
}
createInjuryResults <- function(injury.baseline,injury.scenario){
injury.number.2020 <- injury.number.2036 <- rep(list((matrix(NA,nrow=nTrafficModeV,ncol=nTrafficModeS,dimnames=list(ModeNames,c(ModeNames,'one.party'))))), 4)
names(injury.number.2020) <- names(injury.number.2036) <- c("baseline fatalities","baseline injuries","scenario fatalities","scenario injuries")
$injury.scenario.2020
#computing the total injury number
injury.number.2020[[1]] <- injury.baseline[[1]]+injury.baseline[[2]]+injury.baseline[[3]]#baseline fatalities
injury.number.2020[[2]] <- injury.baseline[[4]]+injury.baseline[[5]]+injury.baseline[[6]]#baseline serious injuries
injury.number.2020[[3]] <- injury.scenario$injury.scenario.2020[[1]]+injury.scenario$injury.scenario.2020[[2]]+injury.scenario$injury.scenario.2020[[3]]#scenario fatalities
injury.number.2020[[4]] <- injury.scenario$injury.scenario.2020[[4]]+injury.scenario$injury.scenario.2020[[5]]+injury.scenario$injury.scenario.2020[[6]]#scenario serious injuries
injury.number.2036[[1]] <- injury.baseline[[1]]+injury.baseline[[2]]+injury.baseline[[3]]#baseline fatalities
injury.number.2036[[2]] <- injury.baseline[[4]]+injury.baseline[[5]]+injury.baseline[[6]]#baseline serious injuries
injury.number.2036[[3]] <- injury.scenario$injury.scenario.2036[[1]]+injury.scenario$injury.scenario.2036[[2]]+injury.scenario$injury.scenario.2036[[3]]#scenario fatalities
injury.number.2036[[4]] <- injury.scenario$injury.scenario.2036[[4]]+injury.scenario$injury.scenario.2036[[5]]+injury.scenario$injury.scenario.2036[[6]]#scenario serious injuries
# replace the NA with 0
injury.number.2020 <- lapply(injury.number.2020,function(x) {
x[is.na(x)]=0
return(x)})
injury.number.2036 <- lapply(injury.number.2036,function(x) {
x[is.na(x)]=0
return(x)})
# compute the RR
injury.RR.2020 <- injury.RR.2036 <- rep(list((matrix(NA,nrow=nTrafficModeV+1,ncol=3,dimnames=list(c(ModeNames[1:6],"total"),c("baseline","scenario","RR"))))), 2)
names(injury.RR.2020) <- names(injury.RR.2036) <- c("fatalities","serious injuries")
for (i in 1:2) {
injury.RR.2020[[i]][1:6,1] <- rowSums(injury.number.2020[[i]])
injury.RR.2020[[i]][1:6,2] <- rowSums(injury.number.2020[[i+2]])
injury.RR.2020[[i]][7,1:2] <- colSums(injury.RR.2020[[i]][1:6,1:2])
injury.RR.2020[[i]][,3] <- injury.RR.2020[[i]][,2]/injury.RR.2020[[i]][,1]
injury.RR.2020[[i]][,3] <- replace(injury.RR.2020[[i]][,3],is.na(injury.RR.2020[[i]][,3]),0)
injury.RR.2036[[i]][1:6,1] <- rowSums(injury.number.2036[[i]])
injury.RR.2036[[i]][1:6,2] <- rowSums(injury.number.2036[[i+2]])
injury.RR.2036[[i]][7,1:2] <- colSums(injury.RR.2036[[i]][1:6,1:2])
injury.RR.2036[[i]][,3] <- injury.RR.2036[[i]][,2]/injury.RR.2036[[i]][,1]
injury.RR.2036[[i]][,3] <- replace(injury.RR.2036[[i]][,3],is.na(injury.RR.2036[[i]][,3]),0)
}
return(list(
injury.number.2020=injury.number.2020,
injury.number.2036=injury.number.2036,
injury.RR.2020=injury.RR.2020,
injury.RR.2036=injury.RR.2036
))
}
createInjuryResults <- function(injury.baseline,injury.scenario){
injury.number.2020 <- injury.number.2036 <- rep(list((matrix(NA,nrow=nTrafficModeV,ncol=nTrafficModeS,dimnames=list(ModeNames,c(ModeNames,'one.party'))))), 4)
names(injury.number.2020) <- names(injury.number.2036) <- c("baseline fatalities","baseline injuries","scenario fatalities","scenario injuries")
#computing the total injury number
injury.number.2020[[1]] <- injury.baseline[[1]]+injury.baseline[[2]]+injury.baseline[[3]]#baseline fatalities
injury.number.2020[[2]] <- injury.baseline[[4]]+injury.baseline[[5]]+injury.baseline[[6]]#baseline serious injuries
injury.number.2020[[3]] <- injury.scenario$injury.scenario.2020[[1]]+injury.scenario$injury.scenario.2020[[2]]+injury.scenario$injury.scenario.2020[[3]]#scenario fatalities
injury.number.2020[[4]] <- injury.scenario$injury.scenario.2020[[4]]+injury.scenario$injury.scenario.2020[[5]]+injury.scenario$injury.scenario.2020[[6]]#scenario serious injuries
injury.number.2036[[1]] <- injury.baseline[[1]]+injury.baseline[[2]]+injury.baseline[[3]]#baseline fatalities
injury.number.2036[[2]] <- injury.baseline[[4]]+injury.baseline[[5]]+injury.baseline[[6]]#baseline serious injuries
injury.number.2036[[3]] <- injury.scenario$injury.scenario.2036[[1]]+injury.scenario$injury.scenario.2036[[2]]+injury.scenario$injury.scenario.2036[[3]]#scenario fatalities
injury.number.2036[[4]] <- injury.scenario$injury.scenario.2036[[4]]+injury.scenario$injury.scenario.2036[[5]]+injury.scenario$injury.scenario.2036[[6]]#scenario serious injuries
# replace the NA with 0
injury.number.2020 <- lapply(injury.number.2020,function(x) {
x[is.na(x)]=0
return(x)})
injury.number.2036 <- lapply(injury.number.2036,function(x) {
x[is.na(x)]=0
return(x)})
# compute the RR
injury.RR.2020 <- injury.RR.2036 <- rep(list((matrix(NA,nrow=nTrafficModeV+1,ncol=3,dimnames=list(c(ModeNames[1:6],"total"),c("baseline","scenario","RR"))))), 2)
names(injury.RR.2020) <- names(injury.RR.2036) <- c("fatalities","serious injuries")
for (i in 1:2) {
injury.RR.2020[[i]][1:6,1] <- rowSums(injury.number.2020[[i]])
injury.RR.2020[[i]][1:6,2] <- rowSums(injury.number.2020[[i+2]])
injury.RR.2020[[i]][7,1:2] <- colSums(injury.RR.2020[[i]][1:6,1:2])
injury.RR.2020[[i]][,3] <- injury.RR.2020[[i]][,2]/injury.RR.2020[[i]][,1]
injury.RR.2020[[i]][,3] <- replace(injury.RR.2020[[i]][,3],is.na(injury.RR.2020[[i]][,3]),0)
injury.RR.2036[[i]][1:6,1] <- rowSums(injury.number.2036[[i]])
injury.RR.2036[[i]][1:6,2] <- rowSums(injury.number.2036[[i+2]])
injury.RR.2036[[i]][7,1:2] <- colSums(injury.RR.2036[[i]][1:6,1:2])
injury.RR.2036[[i]][,3] <- injury.RR.2036[[i]][,2]/injury.RR.2036[[i]][,1]
injury.RR.2036[[i]][,3] <- replace(injury.RR.2036[[i]][,3],is.na(injury.RR.2036[[i]][,3]),0)
}
return(list(
injury.number.2020=injury.number.2020,
injury.number.2036=injury.number.2036,
injury.RR.2020=injury.RR.2020,
injury.RR.2036=injury.RR.2036
))
}
injury.list <- input.csv(countyID = 6)[[1]]
person.vehicle.distance_input.list <- input.csv(countyID = 6)[[2]]
injury.baseline.byRace <-  lapply(injury.list,function(x) createBaselineInjury(x))
scenario.multiplier.byRace <- lapply(person.vehicle.distance_input.list,function(x) createScenarioInjuryMultiplier(x))
injury.scenario.byRace <- mapply(function(x,y) computeScenarioInjury(x,y),injury.baseline.byRace,scenario.multiplier.byRace,SIMPLIFY = FALSE)
injury.result.byRace <- mapply(function(x,y) createInjuryResults(x,y),injury.baseline.byRace,injury.scenario.byRace,SIMPLIFY = FALSE)
injury.result.byRace$NHW$injury.number.2020
injury.result.byRace$NHW$injury.number.2036
library(foreign)
options(scipen = 100)
setwd("/Users/Yizheng/Documents/02_Work/13_ITHIM/03_Data/07_SacSim")
CalRelativeMatrix <- function(x){
for (i in 1:4){
# if the value in that cell equals to 0, we use a small number to avoid NA.
if (x[3,2*i]==0){
ref = 0.01
x[,c((2*i-1):(2*i))] <- x[,c((2*i-1):(2*i))]/ref
x[3,2*i] <- 1
}else{
ref <- x[3,2*i]
x[,c((2*i-1):(2*i))] <- x[,c((2*i-1):(2*i))]/ref
}
}
return(x)
}
recode.pop <- function(pop){
# recode age category
pop$ageID <-
ifelse(pop$AGE<=4,1,
ifelse(pop$AGE<=14,2,
ifelse(pop$AGE<=29,3,
ifelse(pop$AGE<=44,4,
ifelse(pop$AGE<=59,5,
ifelse(pop$AGE<=69,6,
ifelse(pop$AGE<=79,7,8)))))))
# recode ID for the combination of gender and income
# 1. male + income <= 25%
# 2. female + income <= 25%
# 3. male + income <= 50%
# 4. female + income <= 50%
# 5. male + income <= 75%
# 6. female + income <= 75%
# 7. male + income > 75%
# 8. female + income >75%
pop$gender.inc<-
ifelse(pop$SEX==1&pop$HINC<quantile(pop$HINC)[2],1,
ifelse(pop$SEX==2&pop$HINC<quantile(pop$HINC)[2],2,
ifelse(pop$SEX==1&pop$HINC<quantile(pop$HINC)[3],3,
ifelse(pop$SEX==2&pop$HINC<quantile(pop$HINC)[3],4,
ifelse(pop$SEX==1&pop$HINC<quantile(pop$HINC)[4],5,
ifelse(pop$SEX==2&pop$HINC<quantile(pop$HINC)[4],6,
ifelse(pop$SEX==1,7,8)))))))
# recode ID for the combination of gender and income
# 1. male + NHW
# 2. female + NHW
# 3. male + NHB
# 4. female + NHB
# 5. male + NHO
# 6. female + NHO
# 7. male + HO
# 8. female + HO
pop$gender.race<-
ifelse(pop$SEX==1&pop$raceID==1,1,
ifelse(pop$SEX==2&pop$raceID==1,2,
ifelse(pop$SEX==1&pop$raceID==2,3,
ifelse(pop$SEX==2&pop$raceID==2,4,
ifelse(pop$SEX==1&pop$raceID==3,5,
ifelse(pop$SEX==2&pop$raceID==3,6,
ifelse(pop$SEX==1&pop$raceID==4,7,8)))))))
# add a column "ID"  for combining household id and person id
pop$ID <- paste0('h',pop$SERIALNO,'p',pop$PNUM)
return(pop)
}
prepTripPop <- function(pop,triptable){
# compute the mean travel time and travel distance per capita by mode
aggr.by.mode <- aggregate(triptable[,c("TRAVTIME","TRAVDIST")],list(triptable$SAMPN,triptable$PERSN,triptable$MODE),sum)
# rename the variables
names(aggr.by.mode) <- c('SAMPN',"PERSN","MODE","TIME","DISTANCE")
# sort the data by SAMPN, PERSN, and MODE
aggr.by.mode <- aggr.by.mode[order(aggr.by.mode$SAMPN,aggr.by.mode$PERSN,aggr.by.mode$MODE),]
# add a column "ID" for combining household id and person id
aggr.by.mode$ID <- paste0('h',aggr.by.mode$SAMPN,'p',aggr.by.mode$PERSN)
# merge two data sets by ID
trip.pop <- merge(aggr.by.mode,pop,by.x = "ID",by.y = "ID")
return(trip.pop)
}
pop.mean.at.time <- function(trip.pop,pop){
Pop.AT.para.byRace <- Pop.AT.para.byIncome <- matrix(NA,nrow = 6,ncol = 8,
dimnames = list(paste0("county",c(1:6)),c("demogr1_walk","demogr1_cycle","demogr2_walk","demogr2_cycle","demogr3_walk","demogr3_cycle","demogr4_walk","demogr4_cycle")))
for(i in 1:6){#county
for (j in 1:4){#demographic group
#population mean walking time (min/day)
Pop.AT.para.byRace[i,j*2-1]=sum(trip.pop$TIME[which(trip.pop$MODE==9&trip.pop$countyID==i&trip.pop$raceID==j)])/length(which(pop$countyID==i&pop$raceID==j))*7
Pop.AT.para.byRace[i,2*j]=sum(trip.pop$TIME[which(trip.pop$MODE==8&trip.pop$countyID==i&trip.pop$raceID==j)])/length(which(pop$countyID==i&pop$raceID==j))*7
Pop.AT.para.byIncome[i,j*2-1]=sum(trip.pop$TIME[which(trip.pop$MODE==9&trip.pop$countyID==i&trip.pop$hincID==j)])/length(which(pop$countyID==i&pop$hincID==j))*7
Pop.AT.para.byIncome[i,2*j]=sum(trip.pop$TIME[which(trip.pop$MODE==8&trip.pop$countyID==i&trip.pop$hincID==j)])/length(which(pop$countyID==i&pop$hincID==j))*7
}
}
return(list(
Pop.AT.para.byRace=Pop.AT.para.byRace,
Pop.AT.para.byIncome=Pop.AT.para.byIncome
))
}
ActiveTravelDataOutput <- function(pop,trip.pop,countyID,Demo){
# numeric matrix for travel time
travel.times.by.demo <-travel.distance.by.demo <- matrix(nrow = 72, ncol = 8)
# numeric matrix for population distribution
pop.age.gender.demo <- matrix(nrow=8,ncol = 8)
# set the demographic ID
demo.ID<- ifelse(Demo=="Race",demo.ID<- 35,
ifelse(Demo=="Income", demo.ID <- 34,
message("Please type 'Race' or 'Income'")))
for (i in 1:8){ #gender.demo
print(i)
for (j in 1:8){ #age
print(j)
# extract the population distribution
pop.temp <- nrow(pop[which(pop[demo.ID-6]==i&pop$ageID==j&pop$countyID%in%countyID),])
pop.age.gender.demo[j,i]<-pop.temp
# compute the travel time and travel distance
for (k in 1:9){ #mode
time.temp <- sum(trip.pop$TIME[which(trip.pop$ageID==j&trip.pop[demo.ID]==i&trip.pop$MODE==k&trip.pop$countyID%in%countyID)])
travel.times.by.demo[j + 8 * (k - 1), i] <- time.temp
distance.temp <- sum(trip.pop$DISTANCE[which(trip.pop$ageID==j&trip.pop[demo.ID]==i&trip.pop$MODE==k&trip.pop$countyID%in%countyID)])
travel.distance.by.demo[j + 8 * (k - 1), i] <- distance.temp
}
}
}
# compute the travel time and distance per capita (if pop=0,then the output=0)
walk.time.byDemo <- ifelse(pop.age.gender.demo==0,0,travel.times.by.demo[65:72,]/pop.age.gender.demo)
walk.distance.byDemo <- ifelse(pop.age.gender.demo==0,0,travel.distance.by.demo[65:72,]/pop.age.gender.demo)
cycle.time.byDemo <- ifelse(pop.age.gender.demo==0,0,travel.times.by.demo[57:64,]/pop.age.gender.demo)
cycle.distance.byDemo <- ifelse(pop.age.gender.demo==0,0,travel.distance.by.demo[57:64,]/pop.age.gender.demo)
# compute the relative values
re.walk.time.byDemo <- CalRelativeMatrix(walk.time.byDemo)
re.walk.distance.byDemo <- CalRelativeMatrix(walk.distance.byDemo)
re.cycle.time.byDemo <- CalRelativeMatrix(cycle.time.byDemo)
re.cycle.distance.byDemo <- CalRelativeMatrix(cycle.distance.byDemo)
# compute the speed (mph)
walk.speed.byDemo <- walk.distance.byDemo/(walk.time.byDemo/60)
walk.speed.byDemo[is.na(walk.speed.byDemo)] <- 0
cycle.speed.byDemo <- cycle.distance.byDemo/(cycle.time.byDemo/60)
cycle.speed.byDemo[is.na(cycle.speed.byDemo)] <- 0
# compute the relative value for speed
re.walk.speed.byDemo <- CalRelativeMatrix(walk.speed.byDemo)
re.cycle.speed.byDemo <- CalRelativeMatrix(cycle.speed.byDemo)
# add dimnames
temp.gender <- rep(c("male","female"),4)
dimname <- list(c(paste0("ageCat",1:8)),paste0(temp.gender,".Demogr.",rep(1:4,each=2)))
dimnames(re.walk.time.byDemo)<-dimnames(re.cycle.time.byDemo)<-
dimnames(re.walk.speed.byDemo)<-dimnames(re.cycle.speed.byDemo)<-dimnames(pop.age.gender.demo)<-dimname
return(list(
travel.distance.by.demo = travel.distance.by.demo,
travel.times.by.demo = travel.times.by.demo,
pop.age.gender.demo = pop.age.gender.demo,
re.walk.time.byDemo = re.walk.time.byDemo,
re.cycle.time.byDemo = re.cycle.time.byDemo,
re.walk.speed.byDemo = re.walk.speed.byDemo,
re.cycle.speed.byDemo = re.cycle.speed.byDemo
))
}
triptable.2012 <- read.dbf('trip_2012.dbf')
load('pop.2012.cmplt')
pop.2012 <- recode.pop(pop.2012.cmplt)
trip.pop.2012 <- prepTripPop(pop.2012,triptable.2012)
head(trip.pop.2012)
table(trip.pop.2012$MODE)
ModeNames <- c("bike","walk","motorcycle","car","bus","truck")
mode.vmt.byrace <- matrix(NA,nrow = 6,ncol = 4,dimnames = list(ModeNames,c("NHW","NHB","NHO","HO")))
mode.vmt.byrace
for (i in 1:4){
#bike
mode.vmt.byrace[1,i] <- sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==9&trip.pop.2012$countyID==1&trip.pop.2012$raceID==i)])/length(which(pop.2012$countyID==1&pop$raceID==i))
}
for (i in 1:4){
#bike
mode.vmt.byrace[1,i] <- sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==9&trip.pop.2012$countyID==1&trip.pop.2012$raceID==i)])/length(which(pop.2012$countyID==1&pop.2012$raceID==i))
}
mode.vmt.byrace
for (i in 1:4){
#bike
mode.vmt.byrace[1,i] <- sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==8&trip.pop.2012$countyID==1&trip.pop.2012$raceID==i)])/length(which(pop.2012$countyID==1&pop.2012$raceID==i))
#walk
mode.vmt.byrace[2,i] <- sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==9&trip.pop.2012$countyID==1&trip.pop.2012$raceID==i)])/length(which(pop.2012$countyID==1&pop.2012$raceID==i))
}
mode.vmt.byrace
for (i in 1:4){
pop.race <- length(which(pop.2012$countyID==1&pop.2012$raceID==i))
#bike
mode.vmt.byrace[1,i] <- sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==8&trip.pop.2012$countyID==1&trip.pop.2012$raceID==i)])/pop.race
#walk
mode.vmt.byrace[2,i] <- sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==9&trip.pop.2012$countyID==1&trip.pop.2012$raceID==i)])/pop.race
vmt <- sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==5&trip.pop.2012$countyID==1&trip.pop.2012$raceID==i)])/(3.5*pop.race)+sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==6&trip.pop.2012$countyID==1&trip.pop.2012$raceID==i)])/(2*pop.race)+
sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==7&trip.pop.2012$countyID==1&trip.pop.2012$raceID==i)])/(pop.race)
#motorcycle
mode.vmt.byrace[3,i]<-vmt*0.02
#car
mode.vmt.byrace[4,i]<-vmt*0.9
#bus
mode.vmt.byrace[5,i]<-sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==5&trip.pop.2012$countyID==1&trip.pop.2012$raceID==i)])/pop.race+vmt*0.02
#truck
mode.vmt.byrace[6,i]<-vmt*0.06
}
mode.vmt.byrace
#compute VMT by traffic mode
computeVMTbymode <- function(countyID,trip.pop,pop){
ModeNames <- c("bike","walk","motorcycle","car","bus","truck")
mode.vmt.byrace <- matrix(NA,nrow = 6,ncol = 4,dimnames = list(ModeNames,c("NHW","NHB","NHO","HO")))
for (i in 1:4){
pop.race <- length(which(pop$countyID==countyID&pop$raceID==i))
#bike
mode.vmt.byrace[1,i] <- sum(trip.pop$DISTANCE[which(trip.pop$MODE==8&trip.pop$countyID==countyID&trip.pop$raceID==i)])/pop.race
#walk
mode.vmt.byrace[2,i] <- sum(trip.pop$DISTANCE[which(trip.pop$MODE==9&trip.pop$countyID==countyID&trip.pop$raceID==i)])/pop.race
vmt <- sum(trip.pop$DISTANCE[which(trip.pop$MODE==5&trip.pop$countyID==countyID&trip.pop$raceID==i)])/(3.5*pop.race)+sum(trip.pop$DISTANCE[which(trip.pop$MODE==6&trip.pop$countyID==countyID&trip.pop$raceID==i)])/(2*pop.race)+
sum(trip.pop$DISTANCE[which(trip.pop$MODE==7&trip.pop$countyID==countyID&trip.pop$raceID==i)])/(pop.race)
#motorcycle
mode.vmt.byrace[3,i]<-vmt*0.02
#car
mode.vmt.byrace[4,i]<-vmt*0.9
#bus
mode.vmt.byrace[5,i]<-sum(trip.pop$DISTANCE[which(trip.pop$MODE==5&trip.pop$countyID==1&trip.pop$raceID==i)])/pop.race+vmt*0.02
#truck
mode.vmt.byrace[6,i]<-vmt*0.06
}
return(mode.vmt.byrace)
}
vmt.baseline <- lapply(c(1:6),function(x) computeVMTbymode(x,trip.pop.2012,pop.2012))
vmt.baseline
sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==8&trip.pop.2012$countyID==2&trip.pop.2012$raceID==1)])/length(which(pop.2012$countyID==2&pop$raceID==1))
sum(trip.pop.2012$DISTANCE[which(trip.pop.2012$MODE==8&trip.pop.2012$countyID==2&trip.pop.2012$raceID==1)])/length(which(pop.2012$countyID==2&pop.2012$raceID==1))
vmt.baseline <- lapply(c(1:6),function(x) computeVMTbymode(x,trip.pop.2012,pop.2012))
vmt.baseline
triptable.2020 <- read.dbf('trip_2020_am1.dbf')
triptable.2036 <- read.dbf('trip_2036.dbf')
load('pop.2012.cmplt')
load('pop.2020.cmplt')
load('pop.2036.cmplt')
pop.2012 <- recode.pop(pop.2012.cmplt)
pop.2020 <- recode.pop(pop.2020.cmplt[,-c(24:27)])
pop.2036 <- recode.pop(pop.2036.cmplt)
trip.pop.2012 <- prepTripPop(pop.2012,triptable.2012)
trip.pop.2020 <- prepTripPop(pop.2020,triptable.2020)
trip.pop.2036 <- prepTripPop(pop.2036,triptable.2036)
vmt.baseline <- lapply(c(1:6),function(x) computeVMTbymode(x,trip.pop.2012,pop.2012))
vmt.2020 <- lapply(c(1:6),function(x) computeVMTbymode(x,trip.pop.2020,pop.2020))
vmt.2036 <- lapply(c(1:6),function(x) computeVMTbymode(x,trip.pop.2036,pop.2036))
vmt.baseline[[1]]
computeVMTbymode <- function(countyID,trip.pop,pop){
ModeNames <- c("bike","walk","motorcycle","car","bus","truck")
mode.vmt.byrace <- matrix(NA,nrow = 6,ncol = 4,dimnames = list(ModeNames,c("NHW","NHB","NHO","HO")))
for (i in 1:4){
pop.race <- length(which(pop$countyID==countyID&pop$raceID==i))
#bike
mode.vmt.byrace[1,i] <- sum(trip.pop$DISTANCE[which(trip.pop$MODE==8&trip.pop$countyID==countyID&trip.pop$raceID==i)])/pop.race
#walk
mode.vmt.byrace[2,i] <- sum(trip.pop$DISTANCE[which(trip.pop$MODE==9&trip.pop$countyID==countyID&trip.pop$raceID==i)])/pop.race
vmt <- sum(trip.pop$DISTANCE[which(trip.pop$MODE==5&trip.pop$countyID==countyID&trip.pop$raceID==i)])/(3.5*pop.race)+sum(trip.pop$DISTANCE[which(trip.pop$MODE==6&trip.pop$countyID==countyID&trip.pop$raceID==i)])/(2*pop.race)+
sum(trip.pop$DISTANCE[which(trip.pop$MODE==7&trip.pop$countyID==countyID&trip.pop$raceID==i)])/(pop.race)
#motorcycle
mode.vmt.byrace[3,i]<-vmt*0.02
#car
mode.vmt.byrace[4,i]<-vmt*0.9
#bus
mode.vmt.byrace[5,i]<-vmt*0.02
#truck
mode.vmt.byrace[6,i]<-vmt*0.06
}
return(mode.vmt.byrace)
}
vmt.baseline <- lapply(c(1:6),function(x) computeVMTbymode(x,trip.pop.2012,pop.2012))
vmt.2020 <- lapply(c(1:6),function(x) computeVMTbymode(x,trip.pop.2020,pop.2020))
vmt.2036 <- lapply(c(1:6),function(x) computeVMTbymode(x,trip.pop.2036,pop.2036))
vmt.baseline
vmt.baseline[[1]]
vmt.2020[[1]]
vmt.2036[[1]]
vmt.baseline[[2]]
vmt.2020[[2]]
vmt.2036[[2]]
vmt.baseline[[3]]
vmt.2020[[3]]
vmt.2036[[3]]
vmt.baseline[[4]]
vmt.2020[[4]]
vmt.2036[[4]]
vmt.baseline[[5]]
vmt.2020[[5]]
vmt.2036[[5]]
vmt.baseline[[6]]
vmt.2020[[6]]
vmt.2036[[6]]
setwd("/Users/Yizheng/Documents/02_Work/14_GitHub/00_ITHIM/01_Data")
setwd("/Users/Yizheng/Documents/02_Work/14_GitHub/00_ITHIM/01_Data")
filenames <- readLines("04_SWITRS/filenames.txt")
colnames.collision <- colnames(read.csv(filenames[1]))
colnames.parties <- colnames(read.csv(filenames[15]))
collision.temp <- read.csv(filenames[1],header = FALSE,skip = 1)
parties.temp <- read.csv(filenames[15],header = FALSE,skip = 1)
for (i in 2:14){
collision.temp <- rbind(collision.temp,read.csv(filenames[i],header=FALSE,skip = 1))
parties.temp <- rbind(parties.temp,read.csv(filenames[i+14],header=FALSE,skip = 1))
}
colnames(collision.temp)<-colnames.collision
colnames(parties.temp)<-colnames.parties
keep.collision <- c('CASEID','COUNTY','PARTIES','KILLED','SEVINJ','CHPTYPE')
collision.t <- collision.temp[,names(collision.temp)%in%keep.collision]
collision.party.1 <- collision.t[which(collision.t$PARTIES==1),] #one party collisions
collision.party.2 <- collision.t[which(collision.t$PARTIES==2),] #two parties collisions
keep.party <- c('CASEID','PARNUM','ATFAULT',"VEHTYPE",'PRACE')
party.c <- parties.temp[,names(parties.temp)%in%keep.party]
injury.party.1 <- merge(collision.party.1,party.c,by.x = 'CASEID',by.y = 'CASEID')
injury.party.2 <- merge(collision.party.2,party.c,by.x = 'CASEID',by.y = 'CASEID')
recode <- function(injury){
injury$modeID <- ifelse(injury$VEHTYPE=='L',1,
ifelse(injury$VEHTYPE=='N',2,
ifelse(injury$VEHTYPE=='C',3,
ifelse(injury$VEHTYPE%in%c('A','B'),4,
ifelse(injury$VEHTYPE%in%c('D','E','F','G'),5,
ifelse(injury$VEHTYPE%in%c('H','I'),6,99))))))
injury$roadtype <- ifelse(injury$CHPTYPE %in%c(4,5),1,
ifelse(injury$CHPTYPE==3,2,
ifelse(injury$CHPTYPE%in%c(1,2),3,99)))
injury$raceID <- ifelse(injury$PRACE=='W',1,
ifelse(injury$PRACE=='B',2,
ifelse(injury$PRACE%in%c('O','A'),3,
ifelse(injury$PRACE=='H',4,99))))
injury$countyID <- ifelse(injury$COUNTY=='EL DORADO',1,
ifelse(injury$COUNTY=='PLACER',2,
ifelse(injury$COUNTY=='SACRAMENTO',3,
ifelse(injury$COUNTY=='SUTTER',4,
ifelse(injury$COUNTY=='YOLO',5,
ifelse(injury$COUNTY=='YUBA',6,99))))))
return(injury)
}
get.case.ID <- function(SV.ID,VV.ID,roadtype,raceID,countyID){
#"AT FAULT" = Y we define it as the striking mode
#"AT FAULT" = N we define it as the victim mode
CASE.SV <- injury.party.2$CASEID[which(injury.party.2$ATFAULT=='Y'&injury.party.2$modeID==SV.ID&injury.party.2$roadtype==roadtype&injury.party.2$countyID%in%countyID)]
CASE.VV <- injury.party.2$CASEID[which(injury.party.2$ATFAULT=='N'&injury.party.2$modeID==VV.ID&injury.party.2$roadtype==roadtype&injury.party.2$raceID==raceID&injury.party.2$countyID%in%countyID)]
return(intersect(CASE.SV,CASE.VV))
}
get.race.injury <- function(raceID,countyID){
injury.list <-  vector('list',6)
names(injury.list) <- c('local+fatal','arterial+fatal','highway+fatal','local+serious','arterial+serious','highway+serious')
fatal.matrix.temp <- serious.matrix.temp <- matrix(NA,nrow = 6,ncol = 7)
#raceID<-1
for(k in 1:3){ # road type
for (i in 1:6){ #Victim mode
fatal.matrix.temp[i,7]<-sum(injury.party.1$KILLED[injury.party.1$modeID==i&injury.party.1$roadtype==k&injury.party.1$raceID==raceID&injury.party.1$countyID%in%countyID])/5 # annual average number
serious.matrix.temp[i,7]<-sum(injury.party.1$SEVINJ[injury.party.1$modeID==i&injury.party.1$roadtype==k&injury.party.1$raceID==raceID&injury.party.1$countyID%in%countyID])/5 # annual average number
for (j in 1:6){ #Striking mode
fatal.matrix.temp[i,j]<-sum(collision.party.2[collision.party.2$CASEID%in%get.case.ID(j,i,k,raceID,countyID),3])/5 # annual average number
serious.matrix.temp[i,j]<-sum(collision.party.2[collision.party.2$CASEID%in%get.case.ID(j,i,k,raceID,countyID),5])/5 # annual average number
}
}
injury.list[[k]]<-fatal.matrix.temp
injury.list[[k+3]]<-serious.matrix.temp
}
# combine the list in order to output as a .csv file
result <- rbind(injury.list[[1]],injury.list[[2]],injury.list[[3]],injury.list[[4]],injury.list[[5]],injury.list[[6]])
colnames(result)<- c('bike','walk','motorcycle','car','bus','truck','one-party')
rownames(result)<- rep(c('bike','walk','motorcycle','car','bus','truck'),6)
# add the road type and injury type in the .csv file
result.t <- cbind(result,1)
result.t[1:6,8] <- "local fatal"
result.t[7:12,8] <- "arterial fatal"
result.t[13:18,8] <- "highway fatal"
result.t[19:24,8] <- "local serious"
result.t[25:30,8] <- "arterial serious"
result.t[31:36,8] <- "highway serious"
return(result.t)
}
injury.party.1 <- recode(injury.party.1)
injury.party.2 <- recode(injury.party.2)
output.NHW <- get.race.injury(raceID=1,countyID=1) #NHW
output.NHW

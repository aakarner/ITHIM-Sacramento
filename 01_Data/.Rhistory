x1
# (c)
X <- c(-13.87,-2.53,-2.44,-2.4,-1.75,-1.34,-1.05,-0.23,-0.07,0.27,
1.77,2.76,3.29,3.47,3.71,3.8,4.24,4.53,43.21,56.75)
# build the function
log.func <- function(theta){
sum(sapply(1:20,function(i){
-log(pi)-log(1+(theta-X[i])^2)
}))
}
# plot the log likelihood function
x<-seq(-10,10,0.01)
y<-sapply(x,log.func)
plot(x,y,type = 'l',main="log likelihood function",xlab = "theta",ylab = "log likelihood")
X0 <- c(-11,-1,0,1.4,4.1,4.8,7,8,38)
func.f <- function(theta){
-2*sum(sapply(1:20,function(i){
(theta-X[i])/(1+(theta-X[i])^2)
}))
}
func.df <- function(theta){
-2*sum(sapply(1:20,function(i){
(1-(theta-X[i])^2)/(1+(theta-X[i])^2)^2
}))
}
N <- 1000 # maximum number of iteration
tol <-1E-12 #tolerance
newton.raphson <- function(x0){
# while(i<N){
#   x1 <- x0+func.f(x0)/func.df(x0)
# }
i <- 1
result <- numeric(N)
while(i<N){
x1 <- x0-func.f(x0)/func.df(x0)
result[i]<-x1
i <- i+1
if (abs(x1-x0) < tol) break
x0 <- x1
}
return(result[1:i-1])
}
lapply(1:length(X0), function(i) newton.raphson(x0 = X0[i]))
# (c)
X <- c(-13.87,-2.53,-2.44,-2.4,-1.75,-1.34,-1.05,-0.23,-0.07,0.27,
1.77,2.76,3.29,3.47,3.71,3.8,4.24,4.53,43.21,56.75)
# build the function
log.func <- function(theta){
sum(sapply(1:20,function(i){
-log(pi)-log(1+(theta-X[i])^2)
}))
}
# plot the log likelihood function
x<-seq(-10,10,0.01)
y<-sapply(x,log.func)
plot(x,y,type = 'l',main="log likelihood function",xlab = "theta",ylab = "log likelihood")
X0 <- c(-11,-1,0,1.4,4.1,4.8,7,8,38)
func.f <- function(theta){
-2*sum(sapply(1:20,function(i){
(theta-X[i])/(1+(theta-X[i])^2)
}))
}
func.df <- function(theta){
-2*sum(sapply(1:20,function(i){
(1-(theta-X[i])^2)/(1+(theta-X[i])^2)^2
}))
}
N <- 1000 # maximum number of iteration
tol <-1E-12 #tolerance
newton.raphson <- function(x0){
# while(i<N){
#   x1 <- x0+func.f(x0)/func.df(x0)
# }
i <- 1
result <- numeric(N)
x1 <- x0
while(i<N){
x1 <- x0-func.f(x0)/func.df(x0)
result[i]<-x1
i <- i+1
if (abs(x1-x0) < tol) break
x0 <- x1
}
return(result[1:i-1])
}
lapply(1:length(X0), function(i) newton.raphson(x0 = X0[i]))
X <- c(-13.87,-2.53,-2.44,-2.4,-1.75,-1.34,-1.05,-0.23,-0.07,0.27,
1.77,2.76,3.29,3.47,3.71,3.8,4.24,4.53,43.21,56.75)
# build the function
log.func <- function(theta){
sum(sapply(1:20,function(i){
-log(pi)-log(1+(theta-X[i])^2)
}))
}
# plot the log likelihood function
x<-seq(-10,10,0.01)
y<-sapply(x,log.func)
plot(x,y,type = 'l',main="log likelihood function",xlab = "theta",ylab = "log likelihood")
X0 <- c(-11,-1,0,1.4,4.1,4.8,7,8,38)
func.f <- function(theta){
-2*sum(sapply(1:20,function(i){
(theta-X[i])/(1+(theta-X[i])^2)
}))
}
func.df <- function(theta){
-2*sum(sapply(1:20,function(i){
(1-(theta-X[i])^2)/(1+(theta-X[i])^2)^2
}))
}
N <- 1000 # maximum number of iteration
tol <-1E-12 #tolerance
newton.raphson <- function(x0){
# while(i<N){
#   x1 <- x0+func.f(x0)/func.df(x0)
# }
i <- 1
result <- numeric(N)
x1 <- x0
while(i<N & x1-x0>tol){
x1 <- x0-func.f(x0)/func.df(x0)
result[i]<-x1
i <- i+1
x0 <- x1
}
return(result[1:i-1])
}
lapply(1:length(X0), function(i) newton.raphson(x0 = X0[i]))
newton.raphson <- function(x0){
x1 <- x0
for (i in 1:N){
if (abs(x1-x0)<tol){
x1 <- x0-func.f(x0)/func.df(x0)
} else{
break
}
}
return(x1)
}
newton.raphson(-11)
newton.raphson(-1)
newton.raphson(0)
newton.raphson(1.4)
newton.raphson(4.1)
newton.raphson(4.8)
newton.raphson(47)
newton.raphson(7)
newton.raphson <- function(x0){
x1 <- x0
for (i in 1:N){
if (abs(x1-x0)<tol){
x1 <- x0-func.f(x0)/func.df(x0)
x0 <- x1
} else{
break
}
}
return(x1)
}
newton.raphson(7)
newton.raphson(-11)
newton.raphson(-1)
newton.raphson <- function(x0){
x1 <- x0
for (i in 1:N){
if (abs(x1-x0)>tol){
x1 <- x0-func.f(x0)/func.df(x0)
x0 <- x1
} else{
break
}
}
return(x1)
}
newton.raphson(-1)
newton.raphson(-11)
N <- 1000 # maximum number of iteration
tol <- 1E-12 #tolerance
tol
newton.raphson <- function(x0){
x1 <- x0-func.f(x0)/func.df(x0)
for (i in 1:N){
if (abs(x1-x0)>tol){
x1 <- x0-func.f(x0)/func.df(x0)
x0 <- x1
} else{
break
}
}
return(x1)
}
newton.raphson(-11)
newton.raphson(-1)
lapply(1:length(X0), function(i) newton.raphson(x0 = X0[i]))
x <- matrix(rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10),2))
x
y <- matrix(c(47, 97, 123, 152, 191, 200, 76, 107, 139, 159, 201, 207))
y
y.star <- 1/y
u <- 1/x
X <- cbind(rep(1,nrow(x)),x)
X
beta <- solve(t(X)%*%X)%*%X%*%y
beta <- solve(t(X)%*%X)%*%t(X)%*%y
beta
theta1 <- beta[0]
theta1 <- beta[1]
theta2 <- beta[2]
theta1
theta2 <- beta[2]/beta[1]
theta2
theta1
theta1 <- 1/beta[1]
theta1
x <- matrix(rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10),2))
y <- matrix(c(47, 97, 123, 152, 191, 200, 76, 107, 139, 159, 201, 207))
y.star <- 1/y
u <- 1/x
X <- cbind(rep(1,nrow(u)),u)
beta <- solve(t(X)%*%X)%*%t(X)%*%y.star
theta1 <- 1/beta[1]
theta1
theta2 <- beta[2]/beta[1]
theta2
x <- matrix(rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10),2))
y <- matrix(c(47, 97, 123, 152, 191, 200, 76, 107, 139, 159, 201, 207))
y.star <- 1/y
u <- 1/x
X <- cbind(rep(1,nrow(u)),u)
beta <- solve(t(X)%*%X)%*%t(X)%*%y.star
beta
theta1 <- 1/beta[1]
theta1
theta2
theta2 <- beta[2]/beta[1]
theta2
x <- matrix(rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10),2))
y <- matrix(c(47, 97, 123, 152, 191, 200, 76, 107, 139, 159, 201, 207))
y.star <- 1/y
u <- 1/x
X <- cbind(rep(1,nrow(u)),u)
beta <- solve(t(X)%*%X)%*%t(X)%*%y.star
beta
theta1 <- 1/beta[1]
theta1
theta2 <- beta[2]/beta[1]
theta2
length(x)
func.dg = function(theta.1, theta.2){
dg.1 = sum(sapply(1:length(x), function(i) -2*x[i]/(x[i]+theta.2)*(y[i]-theta.1*x[i]/(x[i]+theta.2))))
dg.2 = sum(sapply(1:length(x), function(i) 2*theta.1*x[i]/((x[i]+theta.2)^2)*(y[i]-theta.1*x[i]/(x[i]+theta.2))))
as.matrix(c(dg.1,dg.2))
}
func.dg = function(theta.1, theta.2){
dg.1 = sum(sapply(1:length(x), function(i) -2*x[i]/(x[i]+theta.2)*(y[i]-theta.1*x[i]/(x[i]+theta.2))))
dg.2 = sum(sapply(1:length(x), function(i) 2*theta.1*x[i]/((x[i]+theta.2)^2)*(y[i]-theta.1*x[i]/(x[i]+theta.2))))
matrix(c(dg.1,dg.2))
}
func.ddg = function(theta.1, theta.2){
ddg.11 = sum(sapply(1:length(x), function(i) 2*(x[i]^2)/((x[i]+theta.2)^2)))
ddg.12 = sum(sapply(1:length(x), function(i) 2*x[i]*y[i]/((x[i]+theta.2)^2)-4*theta.1*(x[i])^2/((x[i]+theta.2)^3)))
ddg.22 = sum(sapply(1:length(x), function(i) -4*theta.1*x[i]*y[i]/((x[i]+theta.2)^3)+6*(theta.1^2)*(x[i]^2)/((x[i]+theta.2)^4)))
matrix(c(ddg.11,ddg.12,ddg.12,ddg.22),2,2)
}
x <- matrix(rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10),2))
y <- matrix(c(47, 97, 123, 152, 191, 200, 76, 107, 139, 159, 201, 207))
y.star <- 1/y
u <- 1/x
X <- cbind(rep(1,nrow(u)),u)
beta <- solve(t(X)%*%X)%*%t(X)%*%y.star
beta
theta.1 <- 1/beta[1]
theta.1
theta.2 <- beta[2]/beta[1]
theta.2
func.dg = function(theta.1, theta.2){
dg.1 = sum(sapply(1:length(x), function(i) -2*x[i]/(x[i]+theta.2)*(y[i]-theta.1*x[i]/(x[i]+theta.2))))
dg.2 = sum(sapply(1:length(x), function(i) 2*theta.1*x[i]/((x[i]+theta.2)^2)*(y[i]-theta.1*x[i]/(x[i]+theta.2))))
matrix(c(dg.1,dg.2))
}
func.ddg = function(theta.1, theta.2){
ddg.11 = sum(sapply(1:length(x), function(i) 2*(x[i]^2)/((x[i]+theta.2)^2)))
ddg.12 = sum(sapply(1:length(x), function(i) 2*x[i]*y[i]/((x[i]+theta.2)^2)-4*theta.1*(x[i])^2/((x[i]+theta.2)^3)))
ddg.22 = sum(sapply(1:length(x), function(i) -4*theta.1*x[i]*y[i]/((x[i]+theta.2)^3)+6*(theta.1^2)*(x[i]^2)/((x[i]+theta.2)^4)))
matrix(c(ddg.11,ddg.12,ddg.12,ddg.22),2,2)
}
newton.raphson = function(tol=1E-12,theta.1, theta.2){
i = 1;
theta.11 = theta.1
theta.21 = theta.2
theta.v1 = as.matrix(c(theta.11,theta.21))
theta.v0 = as.matrix(c(theta.1, theta.2))
p = matrix(rep(0,200),2,100)
while(i < 100) {
theta.v1 = (theta.v0 - solve(func.ddg(theta.v0[1,], theta.v0[2,]))%*%func.dg(theta.v0[1,],theta.v0[2,]))
p[,i] = theta.v1
i = i+1
if (t(theta.v1-theta.v0)%*%(theta.v1-theta.v0)/sqrt(t(theta.v0)%*%theta.v0) < tol) break
theta.v0 = theta.v1
}
return(p[,1:i-1])
}
result = newton.raphson(theta.1 = theta.1,theta.2 = theta.2)
result[,ncol(result)]
theta.a = matrix(c(theta.1, theta.2))
steepest.descent = function(theta.v0){
alpha = 1
theta.v1 = theta.v0 - alpha*func.dg(theta.v0[1,],theta.v0[2,])
while(t(theta.v1-theta.v0)%*%(theta.v1-theta.v0)/sqrt(t(theta.v0)%*%theta.v0) > 1E-8) {
d = sum((y-theta.v0[1,]*x/(x+theta.v0[2,]))^2-(y-theta.v1[1,]*x/(x+theta.v1[2,]))^2)
if(d < 0){
alpha = alpha/2
theta.v1 = theta.v0 - alpha*func.dg(theta.v0[1,],theta.v0[2,])
}
if(d > 0){
alpha = 1
theta.v0 = theta.v1
theta.v1 = theta.v0 - alpha*func.dg(theta.v0[1,],theta.v0[2,])
}
}
return(theta.v1)
}
theta.a = matrix(c(theta.1, theta.2))
steepest.descent(theta.a)
A = function(a){
A1 = sapply(1:12, function(i) x[i]/(x[i]+a[2,]))
A2 = sapply(1:12, function(i) -a[1,]*x[i]/(x[i]+a[2,])^2)
A = matrix(cbind(A1,A2))
return(A)
}
Z = function(z){
Z =sapply(1:12, function(i) y[i]-z[1,]*x[i]/(x[i]+z[2,]))
return(matrix(Z))
}
gauss.newton = function(x0){
x1 = x0 + solve(t(A(x0))%*%A(x0))%*%t(A(x0))%*%Z(x0)
while(t(x1-x0)%*%(x1-x0)/sqrt(t(x0)%*%x0) > 1E-8){
x0 = x1
x1 = x0 + solve(t(A(x0))%*%A(x0))%*%t(A(x0))%*%Z(x0)
}
return(x1)
}
gauss.newton(theta.a)
theta.a = matrix(c(theta.1, theta.2))
A = function(a){
A1 = sapply(1:12, function(i) x[i]/(x[i]+a[2,]))
A2 = sapply(1:12, function(i) -a[1,]*x[i]/(x[i]+a[2,])^2)
A = as.matrix(cbind(A1,A2))
return(A)
}
Z = function(z){
Z =sapply(1:12, function(i) y[i]-z[1,]*x[i]/(x[i]+z[2,]))
return(as.matrix(Z))
}
gauss.newton = function(x0){
x1 = x0 + solve(t(A(x0))%*%A(x0))%*%t(A(x0))%*%Z(x0)
while(t(x1-x0)%*%(x1-x0)/sqrt(t(x0)%*%x0) > 1E-8){
x0 = x1
x1 = x0 + solve(t(A(x0))%*%A(x0))%*%t(A(x0))%*%Z(x0)
}
return(x1)
}
gauss.newton(theta.a)
steepest.descent(theta.a)
gauss.newton(theta.a)
library(foreign)
setwd("~/Documents/02_Work/13_ITHIM/03_Data/04_CDPH")
cdph <- read.spss('TEMPB.sav',to.data.frame = TRUE)
local.counties <- c("010") #Fresno (validation purpose)
year <- c("2010")
cdph.local.year <- cdph[which(cdph$county3%in%local.counties & cdph$yod%in%year),]
raceGroupNames <- c("NHW","NHB","NHO","HO")
cdph.local.year$race <- ifelse(cdph.local.year$hisp == "1" & cdph.local.year$race1 == "10",1,
ifelse(cdph.local.year$hisp == "1" & cdph.local.year$race1 == "20",2,
ifelse(cdph.local.year$hisp == "1",3,
ifelse(!(cdph.local.year$hisp %in% c("1","9")),4,99))))
local.gdb.race <- matrix(NA,nrow = 96,ncol = 4)
for (k in 1:4){ # race and ethnicity
for (j in 1:2){ #sex
for (i in 1:8){ # age categories
temp <- cdph.local.year[which(cdph.local.year$sex == j & cdph.local.year$age8cat == i & cdph.local.year$race == k),]
local.gdb.race[(8*(j-1)+i),k] <- sum(temp$GBDGRP2) # Breast cancer
local.gdb.race[(8*(j-1)+i)+16,k] <- sum(temp$GBDGRP1) # Colon cancer
local.gdb.race[(8*(j-1)+i)+32,k] <- sum(temp$GBDGRP4) # CVD
local.gdb.race[(8*(j-1)+i)+48,k] <- sum(temp$GBDGRP6) # Dementia
local.gdb.race[(8*(j-1)+i)+64,k] <- sum(temp$GBDGRP8) # Depression
local.gdb.race[(8*(j-1)+i)+80,k] <- sum(temp$GBDGRP7) # Diabetes
}
}
}
dieaseNamesList <- c(rep("BreastCancer",16),rep("ColonCancer",16),rep("CVD",16),rep("Dementia",16),
rep("Depression",16),rep("Diabetes",16))
dimnames(local.gdb.race) = list(dieaseNamesList,paste0("deaths_",raceGroupNames))
Col2 <- matrix(rep(c(paste0("maleAgeClass ",1:8),paste0("femaleAgeClass ",1:8)),6),96,1)
Col2
local.gdb.race
head(cdph)
library(survey)
options(scipen = 100)
setwd("~/Documents/02_Work/14_GitHub/00_ITHIM/01_Data")
load("00_CHTS2010-2012/Processed_CHTS_2010-2012.RData")
CalRelativeMatrix <- function(x){
for (i in 1:4){
ref <- x[3,2*i] #female in the category of 15~29 years old
x[,c((2*i-1):(2*i))] <- x[,c((2*i-1):(2*i))]/ref
}
return(x)
}
ActiveTravelDataOutput <- function(Demo,CountyCode){
# 2 genders, 12 mode categories, 8 age categories, 4 race categories, 4 income categories
# numeric matrix for travel time
travel.times.by.demo <- matrix(nrow = 96, ncol = 8)
# travel.times.err.by.race <- matrix(nrow = 96, ncol = 4)
# numeric matrix for travel distance
travel.distance.by.demo <- matrix(nrow = 96, ncol = 8)
# travel.distance.err.by.race <- matrix(nrow = 96, ncol = 4)
#
demo.ID<- ifelse(Demo=="Race",demo.ID<- 20,
ifelse(Demo=="Income", demo.ID <- 21,
message("Please type 'Race' or 'Income'")))
for(i in 1:8) { # gender and demo
print(paste0("i is ", i))
for (j in 1:12) { # mode category
print(paste0("j is ", j))
for (k in 1:8) { # age category
time <- try(svytotal(~tripdur, subset(CA.trips.svy,
CA.trips.svy$variables[demo.ID] == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip duration by
# age-sex-demo category
travel.times.by.demo[k + 8 * (j - 1), i] <-
ifelse(class(time) == "try-error", 0, coef(time))
#travel.times.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(time) == "try-error", 0, SE(time))
dist <- try(svytotal(~tripdistance, subset(CA.trips.svy,
CA.trips.svy$variables[demo.ID] == i & age8cat == k & ctfip %in% CountyCode
& mode_recode == levels(factor(CA.trips.svy$variables$mode_recode))[j]),
na.rm = TRUE), silent = TRUE)
# if there are no trips in this category, return 0, otherwise return the total trip distance by
# age-sex-demo category
travel.distance.by.demo[k + 8 * (j - 1), i] <-
ifelse(class(dist) == "try-error", 0, coef(dist))
#travel.distance.err.by.race[k + 8 * (j - 1), i] <-
#ifelse(class(dist) == "try-error", 0, SE(dist))
}
}
}
# Create a table for population counts
if (demo.ID==20){
pop.age.gender.demo <- svytable(~age8cat + gender.race, subset(CA.persons.svy, ctfip %in% CountyCode))
} else{
pop.age.gender.demo <- svytable(~age8cat + gender.inc, subset(CA.persons.svy, ctfip %in% CountyCode))
}
# compute the travel time and distance per capita
walk.time.byDemo <- travel.times.by.demo[c(89:96),]/pop.age.gender.demo[,c(1:8)]
walk.distance.byDemo <- travel.distance.by.demo[c(89:96),]/pop.age.gender.demo[,c(1:8)]
cycle.time.byDemo <- travel.times.by.demo[c(25:32),]/pop.age.gender.demo[,c(1:8)]
cycle.distance.byDemo <- travel.distance.by.demo[c(25:32),]/pop.age.gender.demo[,c(1:8)]
# compute the relative values
re.walk.time.byDemo <- CalRelativeMatrix(walk.time.byDemo)
re.walk.distance.byDemo <- CalRelativeMatrix(walk.distance.byDemo)
re.cycle.time.byDemo <- CalRelativeMatrix(cycle.time.byDemo)
re.cycle.distance.byDemo <- CalRelativeMatrix(cycle.distance.byDemo)
# compute the speed (mph)
walk.speed.byDemo <- walk.distance.byDemo/(walk.time.byDemo/60)
walk.speed.byDemo[is.na(walk.speed.byDemo)] <- 0
cycle.speed.byDemo <- cycle.distance.byDemo/(cycle.time.byDemo/60)
cycle.speed.byDemo[is.na(cycle.speed.byDemo)] <- 0
# compute the relative value for speed
re.walk.speed.byDemo <- CalRelativeMatrix(walk.speed.byDemo)
re.cycle.speed.byDemo <- CalRelativeMatrix(cycle.speed.byDemo)
return(list(
travel.distance.by.demo = travel.distance.by.demo,
travel.times.by.demo = travel.times.by.demo,
pop.age.gender.demo = pop.age.gender.demo,
re.walk.time.byDemo = re.walk.time.byDemo,
re.cycle.time.byDemo = re.cycle.time.byDemo,
re.walk.speed.byDemo = re.walk.speed.byDemo,
re.cycle.speed.byDemo = re.cycle.speed.byDemo
))
}
load("00_CHTS2010-2012/Processed_CHTS_2010-2012.RData")
library(survey)
options(scipen = 100)
setwd("~/Documents/02_Work/14_GitHub/00_ITHIM/01_Data")
load("00_CHTS2010-2012/Processed_CHTS_2010-2012.RData")
library(survey)
library(StatMatch)
options(scipen = 100)
setwd("~/Documents/02_Work/14_GitHub/00_ITHIM/01_Data")
place <- read.csv("00_CHTS2010-2012/place.csv")
persons <- read.csv("00_CHTS2010-2012/persons.csv")
hhs <- read.csv("00_CHTS2010-2012/households.csv")
hhs$incom
table(hhs$incom)
hist(hhs$incom)
hhs$ctfip
table(hhs$incom[which(hhs$ctfip%in%c(6017,6061,6067,6101,6113,6115))])
pie(table(hhs$incom[which(hhs$ctfip%in%c(6017,6061,6067,6101,6113,6115))]))
library(survey)
library(reshape)
library(foreign)
setwd("~/Documents/02_Work/14_GitHub/00_ITHIM/01_Data")
chis.2005 <- read.spss('01_CHIS2005/ADULT.sav',to.data.frame = TRUE)
names(chis.2005) <- tolower(names(chis.2005))
hist(chis.2005$ak22_p)
hist(chis.2005$ak22_p,xlim = 10000)
hist(chis.2005$ak22_p,xlim = range(10000))
hist(chis.2005$ak22_p)
hist(chis.2005$ak22_p,breaks = 10)
hist(chis.2005$ak22_p,breaks = 20)
hist(chis.2005$ak22_p,breaks = 30)

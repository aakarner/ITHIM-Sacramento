exposure[["BreastCancer"]][1:nAgeClass,"F"] <- 4.5
RR.lit[["BreastCancer"]][1:nAgeClass,"F"] <- 0.944
exposure[["BreastCancer"]][1:nAgeClass,"M"] <- 1
RR.lit[["BreastCancer"]][1:nAgeClass,"M"] <- 1
exposure[["ColonCancer"]][1:nAgeClass,"M"] <- 30.9
RR.lit[["ColonCancer"]][1:nAgeClass,"M"] <- 0.8
exposure[["ColonCancer"]][1:nAgeClass,"F"] <- 30.1
RR.lit[["ColonCancer"]][1:nAgeClass,"F"] <- 0.86
exposure[["CVD"]][1:nAgeClass,1:2] <- 7.5
RR.lit[["CVD"]][1:nAgeClass,1:2] <- 0.84
exposure[["Dementia"]][1:nAgeClass,1:2] <- 31.5
RR.lit[["Dementia"]][1:nAgeClass,1:2] <- 0.72
exposure[["Diabetes"]][1:nAgeClass,1:2] <- 10
RR.lit[["Diabetes"]][1:nAgeClass,1:2] <- 0.83
exposure[["Depression"]][1:3,1:2] <- 11.25
RR.lit[["Depression"]][1:3,1:2] <- 0.927945490148335
exposure[["Depression"]][4:nAgeClass,1:2] <- 11.25
RR.lit[["Depression"]][4:nAgeClass,1:2] <- 0.859615572255727
# exposure[["Stroke"]] <- exposure[["CVD"]]
# RR.lit[["Stroke"]] <- RR.lit[["CVD"]]
#
# exposure[["HHD"]] <- exposure[["CVD"]]
# RR.lit[["HHD"]] <- RR.lit[["CVD"]]
#reshape RR matrix
reshapeRR <- function(RR, nQuantiles = 5){
matrix(c(RR[,"M"],RR[,"F"]),nrow=nAgeClass*2,ncol=nQuantiles,dimnames = list((c(paste0("maleAgeClass ",1:nAgeClass),paste0("femaleAgeClass ",1:nAgeClass))),seq(0.1,0.9,by=0.2)))
#list( M = matrix(RR[,"M"], nrow = nAgeClass, ncol = nQuantiles, dimnames = list(paste0("ageClass",1:nAgeClass), seq(0.1,0.9,by=0.2))),F = matrix(RR[,"F"], nrow = nAgeClass, ncol = nQuantiles, dimnames = list(paste0("ageClass",1:nAgeClass), seq(0.1,0.9,by=0.2))))
}
#compute RR matrix
RR <- mapply(function(x,y,z) x^(1/y)^z, RR.lit, exposure, k, SIMPLIFY=FALSE)
RR <- lapply(RR, reshapeRR, nQuantiles = 5)
return(RR)
}
#function for computing local disease burden
computeLocalGBD <- function (){
#Read the gbd data
gbd <- read.csv("04_GBD.csv")
gbdList <- split(gbd,gbd$Disease)
#Input the whole US population in 2010
#source: US Census 2010
allPop <- matrix (c(Pop_Input[10:17,2],Pop_Input[10:17,3]),
byrow=TRUE, ncol = 1, nrow = nAgeClass*2, dimnames = list((c(paste0("maleAgeClass ",1:nAgeClass),paste0("femaleAgeClass ",1:nAgeClass))),"Population"))
# the population in Sacramento area
# source: US Census 2010
# in the spread version, 2377554 is used as the whole Sac population, which is not the right number.
# Here I use the actual sum of population
SacPop <- matrix (PopProp*sum(Pop_Sac), byrow=TRUE, ncol = 1, nrow = nAgeClass*2, dimnames = list((c(paste0("maleAgeClass ",1:nAgeClass),paste0("femaleAgeClass ",1:nAgeClass))),"Population"))
gbd.local <- sapply(gbdList, function(x){x$RR * x[,c(3:6)]/allPop*SacPop}, simplify = FALSE)
# update the colon cancer data with the parameter "colon % of colorectal cancer Male 79% Female 81% "
# The source of data is the CDPH Death Statistical Master file for the years 2009 to 2011.
gbd.local$ColonCancer[c(1:8),] <- gbd.local$ColonCancer[c(1:8),]*0.7878193
gbd.local$ColonCancer[c(9:16),] <- gbd.local$ColonCancer[c(9:16),]*0.814
return(gbd.local)
}
#function for computing health outcome
computeHealthOutcome <- function (RR.PA,BaselineTotalExpo,ScenarioTotalExpo,gbd.local){
#Compute RR for an exposure of x MET
RR.Baseline <- sapply(RR.PA, function(x) {x^(BaselineTotalExpo^k)}, simplify = FALSE)
RR.Scenario <- sapply(RR.PA, function(x) {x^(ScenarioTotalExpo^k)}, simplify = FALSE)
#Compute Ratio of DB relative to group 1
RatioDB.Baseline <- lapply(RR.Baseline,function(x) x/x[,1])
RatioDB.Scenario <- lapply(RR.Scenario,function(x) x/x[,1])
sum.RatioDB.Baseline <-lapply(RatioDB.Baseline,rowSums)
sum.RatioDB.Scenario <-lapply(RatioDB.Scenario,rowSums)
#Compute New Burden and AF
sum.RR.Baseline<-lapply(RR.Baseline,rowSums)
sum.RR.Scenario<-lapply(RR.Scenario,rowSums)
new.burden <- mapply(function(x,y) x/y,sum.RR.Scenario,sum.RR.Baseline,SIMPLIFY=FALSE)
AF <- sapply(new.burden, function(x) 1-x, simplify=FALSE)
#Compute the health outcomes
#Define a function for outputing health outcomes
fun.outcome <- function(x,y){
x[,1] <- y
x[,c(2:5)] <- x[,c(2:5)]*y
return(x)}
#Compute deaths per group
dproj.scenario.firstCol <- mapply(function(x,y,z) x*y$deaths/z, new.burden,gbd.local,sum.RatioDB.Scenario,SIMPLIFY=FALSE)
dproj.scenario <- mapply(fun.outcome,RatioDB.Scenario,dproj.scenario.firstCol,SIMPLIFY=FALSE)
dproj.baseline.firstCol <- mapply(function(x,y) x$deaths/y, gbd.local,sum.RatioDB.Baseline,SIMPLIFY=FALSE)
dproj.baseline <- mapply(fun.outcome,RatioDB.Baseline,dproj.baseline.firstCol,SIMPLIFY=FALSE)
#Compute YLL per group
yll.scenario.firstCol <- mapply(function(x,y,z) x*y$yll/z, new.burden,gbd.local,sum.RatioDB.Scenario,SIMPLIFY=FALSE)
yll.scenario <- mapply(fun.outcome,RatioDB.Scenario,yll.scenario.firstCol,SIMPLIFY=FALSE)
yll.baseline.firstCol <- mapply(function(x,y) x$yll/y, gbd.local,sum.RatioDB.Baseline,SIMPLIFY=FALSE)
yll.baseline <- mapply(fun.outcome,RatioDB.Baseline,yll.baseline.firstCol,SIMPLIFY=FALSE)
#Compute YLD per group
yld.scenario.firstCol <- mapply(function(x,y,z) x*y$yld/z, new.burden,gbd.local,sum.RatioDB.Scenario,SIMPLIFY=FALSE)
yld.scenario <- mapply(fun.outcome,RatioDB.Scenario,yld.scenario.firstCol,SIMPLIFY=FALSE)
yld.baseline.firstCol <- mapply(function(x,y) x$yld/y, gbd.local,sum.RatioDB.Baseline,SIMPLIFY=FALSE)
yld.baseline <- mapply(fun.outcome,RatioDB.Baseline,yld.baseline.firstCol,SIMPLIFY=FALSE)
#Compute the ∆Burden, total ∆Burden, and the proportion
delta.Burden <- rep(list((matrix(NA,nrow=nAgeClass*2,ncol=4,dimnames = list((c(paste0("maleAgeClass ",1:nAgeClass),paste0("femaleAgeClass ",1:nAgeClass))),c("∆Deaths","∆YLL","∆YLD","DALYS"))))), length(diseaseNames))
names(delta.Burden) <- diseaseNames
delta.Burden <- mapply(function (x,a,b,c,d,e,f) {
x[,1] <- rowSums(a)-rowSums(b) #deaths
x[,2] <- rowSums(c)-rowSums(d) #yll
x[,3] <- rowSums(e)-rowSums(f) #yld
x[,4] <- x[,2] + x[,3]         #dalys
return(x)
},delta.Burden, dproj.scenario,dproj.baseline,yll.scenario,yll.baseline,yld.scenario,yld.baseline, SIMPLIFY=FALSE)
total.delta.Burden <- lapply(delta.Burden, colSums)
total.gbd.local <- lapply(gbd.local,function(x){
ifelse(colSums(x)!=0,colSums(x),0.0001)
})
prop.delta.Burden <- mapply(function(x,y) x/y, total.delta.Burden,total.gbd.local,SIMPLIFY=FALSE)
return(list(
AF=AF,
new.burden=new.burden,
delta.Burden=delta.Burden,
prop.delta.Burden= prop.delta.Burden
))
}
############################calculation example#################################
#Create the total exposure matrices by inputing parameters
#(mean walking time(min per week), mean cycling time(min per week), and cv)
BaselineTotalExpo <-TotalExposure(32.4,5.8,1.9216)
ScenarioTotalExpo <-TotalExposure(40,10,1.7112)
#compute the relative risks of Physical Activity (1MET)
RR.PA <- create.PA.RR()
#compute local disease burden
gbd.local <- computeLocalGBD()
#compute health outcomes
HealthOutcome <- computeHealthOutcome(RR.PA,BaselineTotalExpo,ScenarioTotalExpo,gbd.local)
HealthOutcome$delta.Burden
colSums(HealthOutcome$delta.Burden)
sapply(HealthOutcome$delta.Burden,colSums)
BaselineTotalExpo <-TotalExposure(32.4,5.8,1.9216)
ScenarioTotalExpo <-TotalExposure(50,15,1.7112)
RR.PA <- create.PA.RR()
gbd.local <- computeLocalGBD()
HealthOutcome <- computeHealthOutcome(RR.PA,BaselineTotalExpo,ScenarioTotalExpo,gbd.local)
sapply(HealthOutcome$delta.Burden,colSums)
BaselineTotalExpo <-TotalExposure(32.4,5.8,1.9216)
ScenarioTotalExpo <-TotalExposure(60,20,1.7112)
RR.PA <- create.PA.RR()
gbd.local <- computeLocalGBD()
HealthOutcome <- computeHealthOutcome(RR.PA,BaselineTotalExpo,ScenarioTotalExpo,gbd.local)
sapply(HealthOutcome$delta.Burden,colSums)
BaselineTotalExpo <-TotalExposure(32.4,5.8,1.9216)
ScenarioTotalExpo <-TotalExposure(80,40,1.7112)
RR.PA <- create.PA.RR()
gbd.local <- computeLocalGBD()
HealthOutcome <- computeHealthOutcome(RR.PA,BaselineTotalExpo,ScenarioTotalExpo,gbd.local)
sapply(HealthOutcome$delta.Burden,colSums)
ScenarioTotalExpo <-TotalExposure(40,10,1.7112)
RR.PA <- create.PA.RR()
gbd.local <- computeLocalGBD()
HealthOutcome <- computeHealthOutcome(RR.PA,BaselineTotalExpo,ScenarioTotalExpo,gbd.local)
sapply(HealthOutcome$delta.Burden,colSums)
ScenarioTotalExpo <-TotalExposure(50,15,1.7112)
RR.PA <- create.PA.RR()
gbd.local <- computeLocalGBD()
HealthOutcome <- computeHealthOutcome(RR.PA,BaselineTotalExpo,ScenarioTotalExpo,gbd.local)
sapply(HealthOutcome$delta.Burden,colSums)
ScenarioTotalExpo <-TotalExposure(60,20,1.7112)
RR.PA <- create.PA.RR()
gbd.local <- computeLocalGBD()
HealthOutcome <- computeHealthOutcome(RR.PA,BaselineTotalExpo,ScenarioTotalExpo,gbd.local)
sapply(HealthOutcome$delta.Burden,colSums)
setwd("/Users/Yizheng/Documents/01_Study/02_Course/07_17WQ/01_STA135")
data <- read.table("two-markets")
data <- read.table("two-markets.txt")
head(data)
data <- read.table("two-markets.txt",header = TRUE)
head(data)
nrow(data)
colSums(data)
cov(data)
install.packages("CCA")
head(data)
bio <- data[,c(1:3)]
bio
enerygy <- data[,c(4,5)]
enerygy
library(CCA)
data <- read.table("two-markets.txt",header = TRUE)
head(data)
bio <- data[,c(1:3)]
enerygy <- data[,c(4,5)]
cca1 <- cc(X=bio,Y=enerygy)
plot(cca1$cor,type="b",pch=19, xlab = "Cannonical Correlation Index",ylab = expression(rho))
cca1$cor
colnames(cca1$xcoef) <- paste0("U",1:2)
kable(cca1$xcoef)
library(knitr)
kable(cca1$xcoef)
colnames(cca1$ycoef) <- paste0("V",1:3)
colnames(cca1$ycoef) <- paste0("V",1:2)
kable(cca1$ycoef)
colnames(cca1$xcoef) <- paste0("U",1:3)
colnames(cca1$xcoef) <- paste0("U",1:2)
kable(cca1$xcoef)
colnames(cca1$ycoef) <- paste0("V",1:2)
kable(cca1$ycoef)
rho_u_z1 <- cca1$scores$corr.X.xscores
colnames(rho_u_z1)<-paste0("U",1:2)
kable(rho_u_z1)
rho_u_z1 <- cca1$scores$corr.Y.xscores
rho_u_z2 <- cca1$scores$corr.Y.xscores
colnames(rho_u_z2)<-paste0("U",1:2)
kable(rho_u_z2)
rho_v_z1 <- cca1$scores$corr.X.yscores
rho_v_z1 <- cca1$scores$corr.X.yscores
colnames(rho_v_z1)<-paste0("V",1:2)
kable(rho_v_z1)
a <- matrix(c(2.4,1.7,1.7,3.4),2,2)
a
a^(-1)
solve(a)
a*solve(a)
a%*%solve(a)
b=matrix(c(-24,-6),2,1)
b
t(b)
t(b)%*%solve(a)
############ ITHIM application for Equity Analysis - Physical Activity Module ##########
#set your working directory
setwd("~/Documents/02_Work/14_GitHub/00_ITHIM/01_Data/04_Equity Analysis/")
# Prevent scientific notation
options(scipen = 100)
###################### Function Definition ##############################
# function for inputing datasets (.csv)
InputPara <- function (Pop_Input,AT_Input,nonTravelMET_Input,gbd_Input){
# input the population and calculate the proportion of population into each demo categories
Pop_List_byDemo <- rep(list((matrix(NA,nrow=nAgeClass,ncol=2,dimnames=list(paste0("agClass",1:nAgeClass),c("F","M"))))), nDemoClass)
for(i in 1:nDemoClass){
Pop_List_byDemo[[i]] <- as.matrix(Pop_Input[1:nAgeClass,(2*i):(2*i+1)])
}
PopProp_List_byDemo <- mapply(function(x) x/sum(x),Pop_List_byDemo,SIMPLIFY = FALSE)
# input the whole US population in 2010. source: US Census 2010
allPop <- matrix (c(Pop_Input[1:8,11],Pop_Input[1:8,12]),
byrow=TRUE, ncol = 1, nrow = nAgeClass*2, dimnames = list((c(paste0("maleAgeClass ",1:nAgeClass),paste0("femaleAgeClass ",1:nAgeClass))),"Population"))
# input the active transport data into each demo catrgories
AT_List_byDemo <- rep(list((matrix(NA,nrow=nrow(AT_Input),ncol=2))), nDemoClass)
for(i in 1:nDemoClass){
AT_List_byDemo[[i]] <- as.matrix(AT_Input[1:nrow(AT_Input),(2*i):(2*i+1)])
}
# input the non travel METs into each demo catrgories
nonTravelMET_List_byDemo <- rep(list((matrix(NA,nrow=2*nAgeClass,ncol=5))), nDemoClass)
for(i in 1:nDemoClass){
nonTravelMET_List_byDemo[[i]] <- as.matrix(nonTravelMET_Input[(18*i-17):(18*i-2),2:6])
dimnames(nonTravelMET_List_byDemo[[i]]) = list((c(paste0("maleAgeClass ",1:nAgeClass),paste0("femaleAgeClass ",1:nAgeClass))),seq(0.1,0.9,by=0.2))
}
return(list(
PopProp_List_byDemo=PopProp_List_byDemo,
allPop=allPop,
AT_List_byDemo=AT_List_byDemo,
nonTravelMET_List_byDemo=nonTravelMET_List_byDemo,
gbd_Input = gbd_Input
)
)
}
# function for creating total exposure matrix
# after inputing the population Mean Walking/Cycling Time (min per week) and coefficient of variation (cv)
TotalExposure <- function(PopMeanWalkTime, PopMeanCycleTime,cv, AT_Input, PopProp, nonTravelMET){
# The population mean walking/cycling speed (mph)
#"It is common practice in MPOs to assume average walk speed of 3 mph and bicycle speed of 12 mph" from ITHIM user's manual
PopMeanWalkSpeed <- 3.0
PopMeanCycleSpeed <- 12.0
# Numerical matrices for the relative walking time (relative to the value of "female 15-29") and the mean walking time
# Source: CHTS2012 (Per capita mean daily travel time by mode)
Rwt <- as.matrix(AT_Input[1:8,1:2])
dimnames(Rwt) =list(paste0("ageClass ",1:nAgeClass),c("M","F"))
meanWalkTime <- Rwt/PopProp/sum(PopProp*Rwt)*PopMeanWalkTime*PopProp
# Numerical matrices for the relative cycling time (relative to the value of "female 15-29") and the mean cycling time
# Source: CHTS2012 (Per capita mean daily travel time by mode)
Rct <- as.matrix(AT_Input[10:17,1:2])
dimnames(Rct) =list(paste0("ageClass ",1:nAgeClass),c("M","F"))
meanCycleTime <- Rct/PopProp/sum(PopProp*Rct)*PopMeanCycleTime*PopProp
# Numerical matrices for the proportion of mean cycling time to total active transport time
PropMeanCycleTime <- meanCycleTime/(meanWalkTime+meanCycleTime)
# Numerical matrices for the relative walking speed (relative to the value of "female 15-29") and the mean walking speed
# Hard code in spreadsheet with a comment from James W "these will be fixed"
Rws <- as.matrix(AT_Input[19:26,1:2])
dimnames(Rws) =list(paste0("ageClass ",1:nAgeClass),c("M","F"))
meanWalkSpeed <- Rws/PopProp/sum(PopProp*Rws)*PopMeanWalkSpeed*PopProp
# Numerical matrices for the relative cycling speed (relative to the value of "female 15-29") and the mean cycling speed
# Hard code in spreadsheet with a comment from James W "these will be fixed"
Rcs <- as.matrix(AT_Input[28:35,1:2])
dimnames(Rcs) =list(paste0("ageClass ",1:nAgeClass),c("M","F"))
meanCycleSpeed <- Rcs/PopProp/sum(PopProp*Rcs)*PopMeanCycleSpeed*PopProp
# Numerical matrices for the mean walking/cycling MET values
meanWalkMET <- ifelse(1.2216*meanWalkSpeed + 0.0838 < 2.5, 2.5,  1.2216*meanWalkSpeed + 0.0838)
meanCycleMET <- matrix(6, byrow=TRUE, ncol = 2, nrow = nAgeClass, dimnames = list(paste0("ageClass ",1:nAgeClass),c("M","F")))
# Compute Quintiles of Active Transport Time
# Total Active Transport Time
totalATTime <- meanWalkTime + meanCycleTime
# Numerical matrices for the log-normal distribution (mean, sd, log mean, log sd)
meanATtime <- c(totalATTime[,1],totalATTime[,2])
sd <- meanATtime*cv
logMean <- log(meanATtime/sqrt(1+(meanATtime*cv/meanATtime)^2))
logSD <- sqrt(log(1+(meanATtime*cv/meanATtime)^2))
lognorm <- matrix(c(meanATtime,sd,logMean,logSD), byrow=FALSE, ncol = 4, nrow = nAgeClass*2,
dimnames = list(c(paste0("maleAgeClass ",1:nAgeClass),paste0("femaleAgeClass ",1:nAgeClass)),c("Mean","SD","log Mean","log sd")))
# Compute quintiles of total AT time
quintiles <- seq(0.1,0.9,by=0.2)
quintVec <- c()
for (quant in quintiles) {
quintVec <- c(quintVec,mapply(qlnorm,lognorm[,3],lognorm[,4],p=quant))
}
quintTotalATTime <- matrix (quintVec, byrow=FALSE, ncol = 5, nrow = nAgeClass*2,
dimnames = list((c(paste0("maleAgeClass ",1:nAgeClass),paste0("femaleAgeClass ",1:nAgeClass))),seq(0.1,0.9,by=0.2)))
# Compute the quintiles of total walking/cycling time
PropMeanCycleTimeCol <- c(PropMeanCycleTime[,1],PropMeanCycleTime[,2])
quintWalkTime <- quintTotalATTime*(1-PropMeanCycleTimeCol)
quintCycleTime <- quintTotalATTime-quintWalkTime
# Compute the walking/cycling MET-hours and total AC MET-hours
meanWalkMETCol <- c(meanWalkMET[,1],meanWalkMET[,2])
quintWalkMET <- quintWalkTime*meanWalkMETCol/60
meanCycleMETCol <- c(meanCycleMET[,1],meanCycleMET[,2])
quintCycleMET <- quintCycleTime*meanCycleMETCol/60
quintTotalTravelMET <- quintWalkMET+quintCycleMET
# Adding total AC MET-hours and non travel METs
totalExposure <-ifelse(quintTotalTravelMET + nonTravelMET > 2.5, quintTotalTravelMET + nonTravelMET, 0.1)
#return the matrix of total exposure
return(
totalExposure <- totalExposure
)
}
# function for creating total exposure matrix by demographic groups
List_TotalExposure <- function(PopMeanWalkTime, PopMeanCycleTime,cv,InputPara){
# Calculate the total exposure matrix for demographic categories
TotalExposure_List_byDemo <- rep(list((matrix(NA,nrow=2*nAgeClass,ncol=5))), nDemoClass)
# apply the function of TotalExposure()
for(i in 1:nDemoClass){
TotalExposure_List_byDemo[[i]] <- TotalExposure(
PopMeanWalkTime, PopMeanCycleTime,cv,
InputPara$AT_List_byDemo[[i]],
InputPara$PopProp_List_byDemo[[i]],
InputPara$nonTravelMET_List_byDemo[[i]])
}
return(
TotalExposure_List_byDemo=TotalExposure_List_byDemo
)
}
#function for computing relative risks of physical activity
create.PA.RR <- function(){
RR.lit <- exposure <- rep(list((matrix(NA,nrow=nAgeClass,ncol=2,dimnames=list(paste0("agClass",1:nAgeClass),c("F","M"))))), length(diseaseNames))
names(RR.lit) <- names(exposure) <- diseaseNames
#physical
exposure[["BreastCancer"]][1:nAgeClass,"F"] <- 4.5
RR.lit[["BreastCancer"]][1:nAgeClass,"F"] <- 0.944
exposure[["BreastCancer"]][1:nAgeClass,"M"] <- 1
RR.lit[["BreastCancer"]][1:nAgeClass,"M"] <- 1
exposure[["ColonCancer"]][1:nAgeClass,"M"] <- 30.9
RR.lit[["ColonCancer"]][1:nAgeClass,"M"] <- 0.8
exposure[["ColonCancer"]][1:nAgeClass,"F"] <- 30.1
RR.lit[["ColonCancer"]][1:nAgeClass,"F"] <- 0.86
exposure[["CVD"]][1:nAgeClass,1:2] <- 7.5
RR.lit[["CVD"]][1:nAgeClass,1:2] <- 0.84
exposure[["Dementia"]][1:nAgeClass,1:2] <- 31.5
RR.lit[["Dementia"]][1:nAgeClass,1:2] <- 0.72
exposure[["Diabetes"]][1:nAgeClass,1:2] <- 10
RR.lit[["Diabetes"]][1:nAgeClass,1:2] <- 0.83
exposure[["Depression"]][1:3,1:2] <- 11.25
RR.lit[["Depression"]][1:3,1:2] <- 0.927945490148335
exposure[["Depression"]][4:nAgeClass,1:2] <- 11.25
RR.lit[["Depression"]][4:nAgeClass,1:2] <- 0.859615572255727
# exposure[["Stroke"]] <- exposure[["CVD"]]
# RR.lit[["Stroke"]] <- RR.lit[["CVD"]]
#
# exposure[["HHD"]] <- exposure[["CVD"]]
# RR.lit[["HHD"]] <- RR.lit[["CVD"]]
#reshape RR matrix
reshapeRR <- function(RR, nQuantiles = 5){
matrix(c(RR[,"M"],RR[,"F"]),nrow=nAgeClass*2,ncol=nQuantiles,dimnames = list((c(paste0("maleAgeClass ",1:nAgeClass),paste0("femaleAgeClass ",1:nAgeClass))),seq(0.1,0.9,by=0.2)))
#list( M = matrix(RR[,"M"], nrow = nAgeClass, ncol = nQuantiles, dimnames = list(paste0("ageClass",1:nAgeClass), seq(0.1,0.9,by=0.2))),F = matrix(RR[,"F"], nrow = nAgeClass, ncol = nQuantiles, dimnames = list(paste0("ageClass",1:nAgeClass), seq(0.1,0.9,by=0.2))))
}
#compute RR matrix
RR <- mapply(function(x,y,z) x^(1/y)^z, RR.lit, exposure, k, SIMPLIFY=FALSE)
RR <- lapply(RR, reshapeRR, nQuantiles = 5)
return(RR)
}
#function for computing local disease burden
computeLocalGBD <- function (death_List_target,TargetPop,InputPara){
#obtain the gbd and the death data of U.S.
gbd_List_US <- split(InputPara$gbd_Input[,3:6],InputPara$gbd_Input$Disease)
death_List_US <- split(InputPara$gbd_Input[,3],InputPara$gbd_Input$Disease)
# calculate the RR (the ratio of death numbers for target area with those for whole U.S.)
RR_gbd <- rep(list(matrix(NA,ncol = 1,nrow = 2*nAgeClass,dimnames = list((c(paste0("maleAgeclass",1:nAgeClass),paste0("femaleAgeclass",1:nAgeClass))),"RR"))),length(diseaseNames))
names(RR_gbd) <- diseaseNames
RR_gbd <- mapply(function(x,y) (x/TargetPop)/(y/InputPara$allPop),death_List_target,death_List_US,SIMPLIFY = FALSE)
RR_gbd <- lapply(RR_gbd,function(x) replace(x,is.na(x),1.0)) #replace NAs with 1.0
# obtain the local gbd numbers
gbd.local <- mapply(function(x,y) x*y/InputPara$allPop*TargetPop,RR_gbd,gbd_List_US,SIMPLIFY = FALSE)
# update the colon cancer data with the parameter "colon % of colorectal cancer Male 79% Female 81% "
# The source of data is the CDPH Death Statistical Master file for the years 2009 to 2011.
gbd.local$ColonCancer[c(1:8),] <- gbd.local$ColonCancer[c(1:8),]*0.7878193
gbd.local$ColonCancer[c(9:16),] <- gbd.local$ColonCancer[c(9:16),]*0.814
return(gbd.local)
}
#function for computing local disease burden by demographic groups
List_LocalGBD <- function(InputPara){
LocalGBD_List_byDemo <- rep(list(rep(list(matrix(NA,nrow=2*nAgeClass,ncol = 4)),length(diseaseNames))),nDemoClass)
# apply the function "computeLocalGBD" for calculating the local gbd data of all demographic groups
for (i in 1:nDemoClass){
death_List_target <-  split(InputPara$gbd_Input[,i+7],InputPara$gbd_Input$Disease)
TargetPop <- matrix (InputPara$PopProp_List_byDemo[[i]], byrow=TRUE, ncol = 1, nrow = nAgeClass*2, dimnames = list((c(paste0("maleAgeClass ",1:nAgeClass),paste0("femaleAgeClass ",1:nAgeClass))),"Population"))
gbd.local <- computeLocalGBD(death_List_target,TargetPop,InputPara)
LocalGBD_List_byDemo[[i]] <- gbd.local
}
return(
LocalGBD_List_byDemo=LocalGBD_List_byDemo)
}
#function for computing health outcome
computeHealthOutcome <- function (RR.PA,BaselineTotalExpo,ScenarioTotalExpo,gbd.local){
#Compute RR for an exposure of x MET
RR.Baseline <- sapply(RR.PA, function(x) {x^(BaselineTotalExpo^k)}, simplify = FALSE)
RR.Scenario <- sapply(RR.PA, function(x) {x^(ScenarioTotalExpo^k)}, simplify = FALSE)
#Compute Ratio of DB relative to group 1
RatioDB.Baseline <- lapply(RR.Baseline,function(x) x/x[,1])
RatioDB.Scenario <- lapply(RR.Scenario,function(x) x/x[,1])
sum.RatioDB.Baseline <-lapply(RatioDB.Baseline,rowSums)
sum.RatioDB.Scenario <-lapply(RatioDB.Scenario,rowSums)
#Compute New Burden and AF
sum.RR.Baseline<-lapply(RR.Baseline,rowSums)
sum.RR.Scenario<-lapply(RR.Scenario,rowSums)
new.burden <- mapply(function(x,y) x/y,sum.RR.Scenario,sum.RR.Baseline,SIMPLIFY=FALSE)
AF <- sapply(new.burden, function(x) 1-x, simplify=FALSE)
#Compute the health outcomes
#Define a function for outputing health outcomes
fun.outcome <- function(x,y){
x[,1] <- y
x[,c(2:5)] <- x[,c(2:5)]*y
return(x)}
#Compute deaths per group
dproj.scenario.firstCol <- mapply(function(x,y,z) x*y$deaths/z, new.burden,gbd.local,sum.RatioDB.Scenario,SIMPLIFY=FALSE)
dproj.scenario <- mapply(fun.outcome,RatioDB.Scenario,dproj.scenario.firstCol,SIMPLIFY=FALSE)
dproj.baseline.firstCol <- mapply(function(x,y) x$deaths/y, gbd.local,sum.RatioDB.Baseline,SIMPLIFY=FALSE)
dproj.baseline <- mapply(fun.outcome,RatioDB.Baseline,dproj.baseline.firstCol,SIMPLIFY=FALSE)
#Compute YLL per group
yll.scenario.firstCol <- mapply(function(x,y,z) x*y$yll/z, new.burden,gbd.local,sum.RatioDB.Scenario,SIMPLIFY=FALSE)
yll.scenario <- mapply(fun.outcome,RatioDB.Scenario,yll.scenario.firstCol,SIMPLIFY=FALSE)
yll.baseline.firstCol <- mapply(function(x,y) x$yll/y, gbd.local,sum.RatioDB.Baseline,SIMPLIFY=FALSE)
yll.baseline <- mapply(fun.outcome,RatioDB.Baseline,yll.baseline.firstCol,SIMPLIFY=FALSE)
#Compute YLD per group
yld.scenario.firstCol <- mapply(function(x,y,z) x*y$yld/z, new.burden,gbd.local,sum.RatioDB.Scenario,SIMPLIFY=FALSE)
yld.scenario <- mapply(fun.outcome,RatioDB.Scenario,yld.scenario.firstCol,SIMPLIFY=FALSE)
yld.baseline.firstCol <- mapply(function(x,y) x$yld/y, gbd.local,sum.RatioDB.Baseline,SIMPLIFY=FALSE)
yld.baseline <- mapply(fun.outcome,RatioDB.Baseline,yld.baseline.firstCol,SIMPLIFY=FALSE)
#Compute the ∆Burden, total ∆Burden, and the proportion
delta.Burden <- rep(list((matrix(NA,nrow=nAgeClass*2,ncol=4,dimnames = list((c(paste0("maleAgeClass ",1:nAgeClass),paste0("femaleAgeClass ",1:nAgeClass))),c("∆Deaths","∆YLL","∆YLD","DALYS"))))), length(diseaseNames))
names(delta.Burden) <- diseaseNames
delta.Burden <- mapply(function (x,a,b,c,d,e,f) {
x[,1] <- rowSums(a)-rowSums(b) #deaths
x[,2] <- rowSums(c)-rowSums(d) #yll
x[,3] <- rowSums(e)-rowSums(f) #yld
x[,4] <- x[,2] + x[,3]         #dalys
return(x)
},delta.Burden, dproj.scenario,dproj.baseline,yll.scenario,yll.baseline,yld.scenario,yld.baseline, SIMPLIFY=FALSE)
total.delta.Burden <- lapply(delta.Burden, colSums)
total.gbd.local <- lapply(gbd.local,function(x){
ifelse(colSums(x)!=0,colSums(x),0.0001)
})
prop.delta.Burden <- mapply(function(x,y) x/y, total.delta.Burden,total.gbd.local,SIMPLIFY=FALSE)
return(list(
AF=AF,
new.burden=new.burden,
delta.Burden=delta.Burden,
prop.delta.Burden= prop.delta.Burden
))
}
###################### Input Parameter ##############################
# Number of age & demographic categories
nAgeClass <- 8L
nRaceClass <- nIncomeClass <- nDemoClass <- 4L
# paramter of Physical Activity Risk Function (power)
k<-0.5
# disease names
diseaseNames <- c("BreastCancer","ColonCancer","CVD","Dementia","Depression","Diabetes")
# group names for race/ethnicity and income
raceGroupNames <- c("NHW","NHB","NHO","HO")
incomeGroupNames <- c("Low","Medium","High","Other")
# input the population (source: US Census/Finance Department)
Pop_Input_byRace <- read.csv("01_Population_byRace_EA.csv")
Pop_Input_byIncome <- read.csv("02_Population_byIncome_EA.csv")
# input the parameters of active transport (include relative walking/cycling time and speed)
AT_Input_byRace <- read.csv("03_ActiveTransport_byRace_EA.csv")
AT_Input_byIncome <- read.csv("04_ActiveTransport_byIncome_EA.csv")
# input the matrix of Non-travel METs
# source: CHIS2005 (Per capita weekly non-travel related physical activity expressed as metabolic equivalent tasks (kcal/kg body weight/hr of activity))
nonTravelMET_Input_byRace <- read.csv("05_NonTravelMET_byRace_EA.csv")
nonTravelMET_Input_byIncome <- read.csv("06_NonTravelMET_byIncome_EA.csv")
#input the gbd data
gbd_Input_byRace <- read.csv("07_GBD_byRace_EA.csv")
gbd_Input_byIncome <- read.csv("08_GBD_byIncome_EA.csv")
# combine all inputs into a list object
InputPara_byRace <- InputPara(Pop_Input_byRace,AT_Input_byRace,nonTravelMET_Input_byRace,gbd_Input_byRace)
InputPara_byIncome <- InputPara(Pop_Input_byIncome,AT_Input_byIncome,nonTravelMET_Input_byIncome,gbd_Input_byIncome)
###################### Calculation Example ##############################
#Create the total exposure matrices by inputing parameters
#(mean walking time(min per week), mean cycling time(min per week), and cv)
BaselineTotalExpo_byRace <- List_TotalExposure(32.4,5.8,1.9216,InputPara_byRace)
ScenarioTotalExpo_byRace <- List_TotalExposure(64.8,17.5,1.8536,InputPara_byRace)
BaselineTotalExpo_byIncome <- List_TotalExposure(32.4,5.8,1.9216,InputPara_byIncome)
ScenarioTotalExpo_byIncome <- List_TotalExposure(64.8,17.5,1.8536,InputPara_byIncome)
#compute the relative risks of Physical Activity (1MET)
RR.PA <- create.PA.RR()
#compute local disease burden, and create a list to store local gbd for all races
LocalGBD_List_byRace <- List_LocalGBD(InputPara_byRace)
LocalGBD_List_byIncome <- List_LocalGBD(InputPara_byIncome)
#compute health outcomes
HealthOutcome_byRace <-
mapply(function(x,y,z) computeHealthOutcome(RR.PA,x,y,z),BaselineTotalExpo_byRace,ScenarioTotalExpo_byRace,LocalGBD_List_byRace,SIMPLIFY = FALSE)
names(HealthOutcome_byRace) <- raceGroupNames
HealthOutcome_byIncome <-
mapply(function(x,y,z) computeHealthOutcome(RR.PA,x,y,z),BaselineTotalExpo_byIncome,ScenarioTotalExpo_byIncome,LocalGBD_List_byIncome,SIMPLIFY = FALSE)
names(HealthOutcome_byIncome) <- incomeGroupNames
HealthOutcome_byIncome
HealthOutcome_byIncome$Low
HealthOutcome_byIncome$Low$delta.Burden
HealthOutcome_byIncome$Low$delta.Burden$BreastCancer
